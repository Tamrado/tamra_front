"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.actionTypes = {
    PENDING: '@@redux-pender/PENDING',
    SUCCESS: '@@redux-pender/SUCCESS',
    FAILURE: '@@redux-pender/FAILURE',
    CANCEL: '@@redux-pender/CANCEL',
    RESET: '@@redux-pender/RESET',
};
function penderize(type) {
    return {
        PENDING: type + "_PENDING",
        SUCCESS: type + "_SUCCESS",
        FAILURE: type + "_FAILURE",
        CANCEL: type + "_CANCEL",
    };
}
exports.penderize = penderize;
function pender(pendInfo) {
    var _a;
    var defaultUpdater = function (s) { return s; };
    var type = pendInfo.type, onPending = pendInfo.onPending, onSuccess = pendInfo.onSuccess, onFailure = pendInfo.onFailure, onError = pendInfo.onError, onCancel = pendInfo.onCancel;
    var actions = penderize(type);
    var updaters = {
        pending: onPending || defaultUpdater,
        success: onSuccess || defaultUpdater,
        failure: onFailure || onError || defaultUpdater,
        cancel: onCancel || defaultUpdater,
    };
    return _a = {},
        _a[actions.PENDING] = updaters.pending,
        _a[actions.SUCCESS] = updaters.success,
        _a[actions.FAILURE] = updaters.failure,
        _a[actions.CANCEL] = updaters.cancel,
        _a;
}
exports.pender = pender;
function applyPenders(reducer, penderInfos) {
    var penders = penderInfos.map(pender);
    var updaters = {};
    penders.forEach(function (p) {
        var keys = Object.keys(p);
        keys.forEach(function (key) {
            updaters[key] = p[key];
        });
    });
    var enhancedReducer = function (state, action) {
        if (!action || state === undefined)
            return reducer(state, action);
        if (updaters[action.type]) {
            return updaters[action.type](state, action);
        }
        return reducer(state, action);
    };
    return enhancedReducer;
}
exports.applyPenders = applyPenders;
function resetPender() {
    return {
        type: exports.actionTypes.RESET,
    };
}
exports.resetPender = resetPender;
function createPenderAction(type, promiseCreator, metaCreator) {
    return function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var defaultMetaCreator = function (payload) { return payload; };
        var pend = promiseCreator.apply(void 0, params);
        var meta = (metaCreator || defaultMetaCreator).apply(void 0, params);
        return {
            type: type,
            payload: {
                pend: pend,
            },
            meta: meta,
        };
    };
}
exports.createPenderAction = createPenderAction;
