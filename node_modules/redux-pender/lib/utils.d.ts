export declare const actionTypes: {
    PENDING: string;
    SUCCESS: string;
    FAILURE: string;
    CANCEL: string;
    RESET: string;
};
export declare function penderize(type: string): {
    PENDING: string;
    SUCCESS: string;
    FAILURE: string;
    CANCEL: string;
};
declare type AnyReducer<S> = ((state: S, action: any) => S) | ((state: S) => S);
interface PendInfo<S> {
    type: string;
    onPending?: AnyReducer<S>;
    onSuccess?: AnyReducer<S>;
    onFailure?: AnyReducer<S>;
    onError?: AnyReducer<S>;
    onCancel?: AnyReducer<S>;
}
export declare function pender<S>(pendInfo: PendInfo<S>): {
    [x: string]: (state: S, action: any) => S;
};
declare type Reducer<S> = (state: S | undefined, action: any) => S;
export declare function applyPenders<S>(reducer: (state: S | undefined, action: any) => S, penderInfos: PendInfo<S>[]): Reducer<S>;
export declare function resetPender(): {
    type: string;
};
declare type PromiseCreator = (...params: any[]) => Promise<any>;
declare type MetaCreator = (...params: any[]) => any;
export declare function createPenderAction(type: string, promiseCreator: PromiseCreator, metaCreator?: MetaCreator): (...params: any[]) => {
    type: string;
    payload: {
        pend: Promise<any>;
    };
    meta: any;
};
declare type ArgumentsType<T> = T extends (...args: infer A) => any ? A : never;
export declare type ReturnAny<F> = (...args: ArgumentsType<F>) => any;
export {};
