"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var PENDING = utils_1.actionTypes.PENDING, SUCCESS = utils_1.actionTypes.SUCCESS, FAILURE = utils_1.actionTypes.FAILURE, RESET = utils_1.actionTypes.RESET, CANCEL = utils_1.actionTypes.CANCEL;
var initialState = {
    pending: {},
    success: {},
    failure: {},
};
function penderReducer(state, action) {
    if (state === void 0) { state = initialState; }
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    switch (action.type) {
        case PENDING:
            return {
                pending: __assign({}, state.pending, (_a = {}, _a[action.payload] = true, _a)),
                success: __assign({}, state.success, (_b = {}, _b[action.payload] = false, _b)),
                failure: __assign({}, state.failure, (_c = {}, _c[action.payload] = false, _c)),
            };
        case SUCCESS:
            return {
                pending: __assign({}, state.pending, (_d = {}, _d[action.payload] = false, _d)),
                success: __assign({}, state.success, (_e = {}, _e[action.payload] = true, _e)),
                failure: __assign({}, state.failure, (_f = {}, _f[action.payload] = false, _f)),
            };
        case FAILURE:
            return {
                pending: __assign({}, state.pending, (_g = {}, _g[action.payload] = false, _g)),
                success: __assign({}, state.success, (_h = {}, _h[action.payload] = false, _h)),
                failure: __assign({}, state.failure, (_j = {}, _j[action.payload] = true, _j)),
            };
        case CANCEL:
            return {
                pending: __assign({}, state.pending, (_k = {}, _k[action.payload] = false, _k)),
                success: __assign({}, state.success, (_l = {}, _l[action.payload] = false, _l)),
                failure: __assign({}, state.failure, (_m = {}, _m[action.payload] = false, _m)),
            };
        case RESET:
            return initialState;
        default:
            return state;
    }
}
exports.default = penderReducer;
