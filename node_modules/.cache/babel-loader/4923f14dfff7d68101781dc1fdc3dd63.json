{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\user\\\\fronttimeline\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import{isEmail,isAlphanumeric,isLength}from'validator';import debounce from'lodash/debounce';export var AuthActions;export var password;var setAuthActions=function setAuthActions(authActions){AuthActions=authActions;};export{setAuthActions};var setPassword=function setPassword(Password){password=Password;};export{setPassword};var setError=function setError(message,id){AuthActions.setError({form:'register',message:message});AuthActions.setErrorId({form:'register',id:id});};export{setError};export var validate={email:function email(value){if(!isEmail(value)){setError('잘못된 이메일 형식 입니다.','email');return false;}return true;},id:function id(value){if(!isAlphanumeric(value)||!isLength(value,{min:9,max:15})){setError('아이디는 9~15 글자의 알파벳 혹은 숫자로 이루어져야 합니다.','id');return false;}return true;},password:function password(value){if(!new RegExp(/^(?=.*\\d)(?=.*[~`!@#$%\\\\^&*()-])(?=.*[a-z])(?=.*[A-Z]).{9,12}$/).test(value)){setError('비밀번호는 9~12 글자의 알파벳 (대소문자 구분), 숫자, 특수문자로 이루어져야 합니다.','password');return false;}else if(new RegExp(/(\\w)\\1\\1\\1/).test(value)){setError('비밀번호는 같은 문자를 4번 이상 사용할 수 없습니다.','password');return false;}setError(null);return true;},passwordConfirm:function passwordConfirm(value){if(password!==value){setError('비밀번호 확인이 일치하지 않습니다.','passwordConfirm');return false;}setError(null);return true;},phone:function phone(value){if(!new RegExp(/^01(?:0|1|[6-9])-(\\d{3}|\\d{4})-(\\d{4})$/).test(value)){setError('핸드폰 번호는 01x-xxx(x)-xxxx와 같은 형태로 입력해야 합니다.','phone');return false;}return true;},comment:function comment(value){if(!isLength(value,{min:0,max:50})){setError('코멘트는 50자를 넘길 수 없습니다.','comment');return false;}setError(null);return true;},name:function name(value){if(!isLength(value,{min:1,max:30})){setError('이름은 1자 이상 30자 이하여야 합니다.','name');return false;}setError(null);return true;},gender:function gender(value){if(value==null){setError('성별은 반드시 입력해야 합니다.','gender');return false;}setError(null);return true;}};export var checkEmailExists=debounce(function _callee(email){return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regeneratorRuntime.awrap(AuthActions.checkEmailExists(email,'null'));case 3:setError(null,'email');_context.next=9;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](0);setError('이미 존재하는 이메일입니다.','email');case 9:case\"end\":return _context.stop();}}},null,null,[[0,6]]);},300);export var checkIdExists=debounce(function _callee2(id){return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return _regeneratorRuntime.awrap(AuthActions.checkIdExists(id));case 3:setError(null,'id');_context2.next=9;break;case 6:_context2.prev=6;_context2.t0=_context2[\"catch\"](0);setError('이미 존재하는 아이디입니다.','id');case 9:case\"end\":return _context2.stop();}}},null,null,[[0,6]]);},300);export var checkPhoneExists=debounce(function _callee3(phone){return _regeneratorRuntime.async(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return _regeneratorRuntime.awrap(AuthActions.checkPhoneExists(phone,'null'));case 3:setError(null,'phone');_context3.next=9;break;case 6:_context3.prev=6;_context3.t0=_context3[\"catch\"](0);setError('이미 존재하는 핸드폰 번호입니다.','phone');case 9:case\"end\":return _context3.stop();}}},null,null,[[0,6]]);},300);export var inputStyle={width:'15%',left:'5%',position:'relative',outline:'none',borderRadius:'0px',lineHeight:'2.5rem',fontSize:'1.2rem',paddingLeft:'0.5rem',fontFamily:'Noto Sans KR',fontStyle:'normal',paddingRight:'1rem',marginRight:'1rem'};","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/containers/Function/ValidateModule.js"],"names":["isEmail","isAlphanumeric","isLength","debounce","AuthActions","password","setAuthActions","authActions","setPassword","Password","setError","message","id","form","setErrorId","validate","email","value","min","max","RegExp","test","passwordConfirm","phone","comment","name","gender","checkEmailExists","checkIdExists","checkPhoneExists","inputStyle","width","left","position","outline","borderRadius","lineHeight","fontSize","paddingLeft","fontFamily","fontStyle","paddingRight","marginRight"],"mappings":"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","sourcesContent":["import {isEmail,isAlphanumeric,isLength} from 'validator';\r\nimport debounce from 'lodash/debounce';\r\n\r\nexport let AuthActions;\r\nexport let password;\r\nconst setAuthActions = (authActions) => {\r\n    AuthActions = authActions;\r\n}\r\nexport {setAuthActions};\r\nconst setPassword = (Password) => {\r\n    password = Password;\r\n}\r\nexport {setPassword};\r\nconst setError = (message,id) => {\r\n    AuthActions.setError({form: 'register',message});\r\n    AuthActions.setErrorId({form: 'register',id});\r\n};\r\nexport {setError};\r\nexport const validate = {\r\n    email: (value) => {\r\n        if(!isEmail(value)){\r\n            setError('잘못된 이메일 형식 입니다.','email');\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n        id: (value) => {\r\n        if(!isAlphanumeric(value) || !isLength(value, {min:9, max: 15})) {\r\n            setError('아이디는 9~15 글자의 알파벳 혹은 숫자로 이루어져야 합니다.','id');\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    password: (value) => {\r\n        \r\n        if(!new RegExp(/^(?=.*\\d)(?=.*[~`!@#$%\\\\^&*()-])(?=.*[a-z])(?=.*[A-Z]).{9,12}$/).test(value)){\r\n            setError('비밀번호는 9~12 글자의 알파벳 (대소문자 구분), 숫자, 특수문자로 이루어져야 합니다.','password');\r\n            return false;\r\n        }\r\n        else if(new RegExp(/(\\w)\\1\\1\\1/).test(value)){\r\n            setError('비밀번호는 같은 문자를 4번 이상 사용할 수 없습니다.','password');\r\n            return false;\r\n        }\r\n        setError(null);\r\n        return true;\r\n    },\r\n    passwordConfirm: (value) => {\r\n        if(password !== value){\r\n            setError('비밀번호 확인이 일치하지 않습니다.','passwordConfirm');\r\n            return false;\r\n        }\r\n        setError(null);\r\n        return true;\r\n    },\r\n    phone: (value)=> {\r\n        if(!new RegExp(/^01(?:0|1|[6-9])-(\\d{3}|\\d{4})-(\\d{4})$/).test(value)){\r\n           setError('핸드폰 번호는 01x-xxx(x)-xxxx와 같은 형태로 입력해야 합니다.','phone');\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    comment: (value)=> {\r\n        if(!isLength(value, {min:0, max: 50})){\r\n            setError('코멘트는 50자를 넘길 수 없습니다.','comment');\r\n            return false;\r\n        }\r\n        setError(null);\r\n        return true;\r\n    },\r\n    name: (value) => {\r\n        if(!isLength(value, {min:1, max: 30})){\r\n            setError('이름은 1자 이상 30자 이하여야 합니다.','name');\r\n            return false;\r\n        }\r\n        setError(null);\r\n        return true;\r\n    },\r\n    gender: (value) => {\r\n        if(value == null){\r\n            setError('성별은 반드시 입력해야 합니다.','gender');\r\n            return false;\r\n        }\r\n        setError(null);\r\n        return true;\r\n    }\r\n\r\n};\r\n\r\nexport const checkEmailExists = debounce(async (email) => {\r\n    try{\r\n        await AuthActions.checkEmailExists(email,'null');\r\n        setError(null,'email');\r\n    }catch(e){\r\n        setError('이미 존재하는 이메일입니다.','email');\r\n    }\r\n},300);\r\n\r\nexport const checkIdExists = debounce(async(id)=> {\r\n    try{\r\n        await AuthActions.checkIdExists(id);\r\n            setError(null,'id');\r\n        \r\n    } catch (e){\r\n        setError('이미 존재하는 아이디입니다.','id');\r\n    }\r\n},300);\r\n\r\nexport const checkPhoneExists = debounce(async(phone) => {\r\n    try{\r\n        await AuthActions.checkPhoneExists(phone,'null');\r\n            setError(null,'phone');\r\n        \r\n    }catch (e){\r\n        setError('이미 존재하는 핸드폰 번호입니다.','phone');\r\n    }\r\n},300);\r\n\r\nexport const inputStyle = {\r\n    width: '15%',\r\n    left: '5%',\r\n    position: 'relative',\r\noutline: 'none',\r\nborderRadius: '0px',\r\nlineHeight: '2.5rem',\r\nfontSize: '1.2rem',\r\npaddingLeft: '0.5rem',\r\nfontFamily: 'Noto Sans KR',\r\nfontStyle: 'normal',\r\npaddingRight: '1rem',\r\nmarginRight : '1rem'\r\n}\r\n"]},"metadata":{},"sourceType":"module"}