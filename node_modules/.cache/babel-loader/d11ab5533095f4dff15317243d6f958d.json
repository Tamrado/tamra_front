{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\fronttimeline\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport { pender } from 'redux-pender';\nimport * as AuthAPI from '../../lib/api/auth';\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS';\nconst CHECK_ID_EXISTS = 'auth/CHECK_ID_EXISTS';\nconst CHECK_PHONE_EXISTS = 'auth/CHECK_PHONE_EXISTS';\nconst SET_ERROR = 'auth/SET_ERROR';\nconst SET_ERROR_ID = 'auth/SET_ERROR_ID';\nconst LOCAL_REGISTER = 'auth/LOCAL_REGISTER';\nconst LOCAL_LOGIN = 'auth/LOCAL_LOGIN';\nconst LOCAL_REGISTER_IMAGE = 'auth/LOCAL_REGISTER_IMAGE';\nconst LOGOUT = 'auth/LOGOUT';\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\n\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\n\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists);\nexport const checkIdExists = createAction(CHECK_ID_EXISTS, AuthAPI.checkIdExists);\nexport const checkPhoneExists = createAction(CHECK_PHONE_EXISTS, AuthAPI.checkPhoneExists);\nexport const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister);\nexport const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin);\nexport const localRegisterImage = createAction(LOCAL_REGISTER_IMAGE, AuthAPI.localRegisterImage);\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\nexport const changeInput = createAction(CHANGE_INPUT); // {form, name, value}\n\nexport const initializeForm = createAction(INITIALIZE_FORM); //form\n\nexport const setError = createAction(SET_ERROR);\nexport const setErrorId = createAction(SET_ERROR_ID);\nconst initialState = Map({\n  register: Map({\n    form: Map({\n      id: '',\n      password: '',\n      passwordConfirm: '',\n      email: '',\n      phone: '',\n      comment: '',\n      birthday: '',\n      name: '',\n      gender: '',\n      address: ''\n    }),\n    error: null,\n    errorId: ''\n  }),\n  registerImage: Map({\n    form: Map({\n      image: null\n    })\n  }),\n  login: Map({\n    form: Map({\n      id: '',\n      password: ''\n    }),\n    error: null\n  }),\n  result: Map({})\n});\nexport default handleActions(_objectSpread({\n  [CHANGE_INPUT]: (state, action) => {\n    const _action$payload = action.payload,\n          form = _action$payload.form,\n          name = _action$payload.name,\n          value = _action$payload.value;\n    return state.setIn([form, 'form', name], value);\n  },\n  [INITIALIZE_FORM]: (state, action) => {\n    const initialForm = initialState.get(action.payload);\n    return state.set(action.payload, initialForm);\n  },\n  [SET_ERROR]: (state, action) => {\n    const _action$payload2 = action.payload,\n          form = _action$payload2.form,\n          message = _action$payload2.message;\n    return state.setIn([form, 'error'], message);\n  },\n  [SET_ERROR_ID]: (state, action) => {\n    const _action$payload3 = action.payload,\n          form = _action$payload3.form,\n          id = _action$payload3.id;\n    return state.setIn([form, 'errorId'], id);\n  }\n}, pender({\n  type: CHECK_EMAIL_EXISTS,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n}), {}, pender({\n  type: CHECK_PHONE_EXISTS,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n}), {}, pender({\n  type: CHECK_ID_EXISTS,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n}), {}, pender({\n  type: LOCAL_REGISTER_IMAGE,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n}), {}, pender({\n  type: LOCAL_LOGIN,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n}), {}, pender({\n  type: LOCAL_REGISTER,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n})), initialState);","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/redux/modules/auth.js"],"names":["createAction","handleActions","Map","pender","AuthAPI","CHECK_EMAIL_EXISTS","CHECK_ID_EXISTS","CHECK_PHONE_EXISTS","SET_ERROR","SET_ERROR_ID","LOCAL_REGISTER","LOCAL_LOGIN","LOCAL_REGISTER_IMAGE","LOGOUT","CHANGE_INPUT","INITIALIZE_FORM","checkEmailExists","checkIdExists","checkPhoneExists","localRegister","localLogin","localRegisterImage","logout","changeInput","initializeForm","setError","setErrorId","initialState","register","form","id","password","passwordConfirm","email","phone","comment","birthday","name","gender","address","error","errorId","registerImage","image","login","result","state","action","payload","value","setIn","initialForm","get","set","message","type","onSuccess","data"],"mappings":"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","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\r\nimport {Map} from 'immutable';\r\nimport {pender} from 'redux-pender';\r\nimport * as AuthAPI from '../../lib/api/auth';\r\n\r\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS';\r\nconst CHECK_ID_EXISTS = 'auth/CHECK_ID_EXISTS';\r\nconst CHECK_PHONE_EXISTS = 'auth/CHECK_PHONE_EXISTS';\r\n\r\nconst SET_ERROR = 'auth/SET_ERROR';\r\nconst SET_ERROR_ID = 'auth/SET_ERROR_ID';\r\n\r\nconst LOCAL_REGISTER = 'auth/LOCAL_REGISTER';\r\nconst LOCAL_LOGIN = 'auth/LOCAL_LOGIN';\r\nconst LOCAL_REGISTER_IMAGE = 'auth/LOCAL_REGISTER_IMAGE';\r\nconst LOGOUT = 'auth/LOGOUT';\r\n\r\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT';// input 값 변경\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\r\n\r\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists);\r\nexport const checkIdExists = createAction(CHECK_ID_EXISTS,AuthAPI.checkIdExists);\r\nexport const checkPhoneExists = createAction(CHECK_PHONE_EXISTS, AuthAPI.checkPhoneExists);\r\n\r\nexport const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister);\r\nexport const localLogin = createAction(LOCAL_LOGIN,AuthAPI.localLogin);\r\nexport const localRegisterImage = createAction(LOCAL_REGISTER_IMAGE,AuthAPI.localRegisterImage);\r\n\r\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\r\n\r\nexport const changeInput = createAction(CHANGE_INPUT);// {form, name, value}\r\nexport const initializeForm = createAction(INITIALIZE_FORM); //form\r\nexport const setError = createAction(SET_ERROR);\r\nexport const setErrorId = createAction(SET_ERROR_ID);\r\n\r\nconst initialState = Map({\r\n    register: Map({\r\n        form: Map({\r\n            id : '',\r\n            password: '',\r\n            passwordConfirm : '',\r\n            email: '',\r\n            phone: '',\r\n            comment: '',\r\n            birthday : '',\r\n            name : '',\r\n            gender : '',\r\n            address : ''\r\n            }),\r\n        error: null,\r\n        errorId : ''\r\n    }),\r\n    registerImage: Map({\r\n        form : Map({\r\n            image : null\r\n        })\r\n    }),\r\n    login: Map({\r\n        form: Map({\r\n            id: '',\r\n            password: ''\r\n        }),\r\n        error: null\r\n    }),\r\n    result: Map({})\r\n});\r\n\r\n\r\nexport default handleActions({\r\n    [CHANGE_INPUT]:(state, action) => {\r\n        const {form,name,value}=action.payload;\r\n        return state.setIn([form,'form',name], value);\r\n    },\r\n    [INITIALIZE_FORM]: (state, action) => {\r\n        const initialForm = initialState.get(action.payload);\r\n        return state.set(action.payload, initialForm);\r\n    },\r\n    [SET_ERROR]: (state, action)=> {\r\n        const {form, message} = action.payload;\r\n        return state.setIn([form, 'error'],message);\r\n    },\r\n    [SET_ERROR_ID] : (state,action) => {\r\n        const {form, id} = action.payload;\r\n        return state.setIn([form, 'errorId'],id);\r\n    },\r\n    ...pender({\r\n        type: CHECK_EMAIL_EXISTS,\r\n        onSuccess: (state,action) => state.set('result', Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: CHECK_PHONE_EXISTS,\r\n        onSuccess: (state,action) => state.set('result', Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: CHECK_ID_EXISTS,\r\n        onSuccess: (state,action) => state.set('result', Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: LOCAL_REGISTER_IMAGE,\r\n        onSuccess: (state, action) => state.set('result',Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: LOCAL_LOGIN,\r\n        onSuccess: (state, action) => state.set('result',Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: LOCAL_REGISTER,\r\n        onSuccess: (state,action) => state.set('result',Map(action.payload.data))\r\n    })\r\n}, initialState);"]},"metadata":{},"sourceType":"module"}