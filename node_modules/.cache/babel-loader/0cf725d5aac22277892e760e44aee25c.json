{"ast":null,"code":"import { isEmail, isAlphanumeric, isLength } from 'validator';\nimport debounce from 'lodash/debounce';\nexport let AuthAction;\n\nconst setAuthActions = AuthActions => {\n  AuthAction = AuthActions;\n};\n\nexport { setAuthActions };\n\nconst setError = (message, id) => {\n  const AuthActions = this.AuthActions;\n  AuthActions.setError({\n    form: 'register',\n    message\n  });\n  AuthActions.setErrorId({\n    form: 'register',\n    id\n  });\n};\n\nexport { setError };\nexport const validate = {\n  email: value => {\n    if (!isEmail(value)) {\n      this.setError('잘못된 이메일 형식 입니다.', 'email');\n      return false;\n    }\n\n    return true;\n  },\n  id: value => {\n    if (!isAlphanumeric(value) || !isLength(value, {\n      min: 9,\n      max: 15\n    })) {\n      this.setError('아이디는 9~15 글자의 알파벳 혹은 숫자로 이루어져야 합니다.', 'id');\n      return false;\n    }\n\n    return true;\n  },\n  password: value => {\n    if (!new RegExp(/^(?=.*\\d)(?=.*[~`!@#$%\\\\^&*()-])(?=.*[a-z])(?=.*[A-Z]).{9,12}$/).test(value)) {\n      this.setError('비밀번호는 9~12 글자의 알파벳 (대소문자 구분), 숫자, 특수문자로 이루어져야 합니다.', 'password');\n      return false;\n    } else if (new RegExp(/(\\w)\\1\\1\\1/).test(value)) {\n      this.setError('비밀번호는 같은 문자를 4번 이상 사용할 수 없습니다.', 'password');\n      return false;\n    }\n\n    this.setError(null);\n    return true;\n  },\n  passwordConfirm: value => {\n    if (this.props.form.get('password') !== value) {\n      this.setError('비밀번호 확인이 일치하지 않습니다.', 'passwordConfirm');\n      return false;\n    }\n\n    this.setError(null);\n    return true;\n  },\n  phone: value => {\n    if (!new RegExp(/^01(?:0|1|[6-9])-(\\d{3}|\\d{4})-(\\d{4})$/).test(value)) {\n      this.setError('핸드폰 번호는 01x-xxx(x)-xxxx와 같은 형태로 입력해야 합니다.', 'phone');\n      return false;\n    }\n\n    return true;\n  },\n  comment: value => {\n    if (!isLength(value, {\n      min: 0,\n      max: 50\n    })) {\n      this.setError('코멘트는 50자를 넘길 수 없습니다.', 'comment');\n      return false;\n    }\n\n    this.setError(null);\n    return true;\n  },\n  name: value => {\n    if (!isLength(value, {\n      min: 1,\n      max: 30\n    })) {\n      this.setError('이름은 1자 이상 30자 이하여야 합니다.', 'name');\n      return false;\n    }\n\n    this.setError(null);\n    return true;\n  },\n  gender: value => {\n    if (value == null) {\n      this.setError('성별은 반드시 입력해야 합니다.', 'gender');\n      return false;\n    }\n\n    this.setError(null);\n    return true;\n  }\n};\nexport const checkEmailExists = debounce(async email => {\n  const AuthActions = this.props.AuthActions;\n\n  try {\n    await AuthActions.checkEmailExists(email, 'null');\n    this.setError(null, 'email');\n  } catch (e) {\n    this.setError('이미 존재하는 이메일입니다.', 'email');\n  }\n}, 300);\nexport const checkIdExists = debounce(async id => {\n  const AuthActions = this.props.AuthActions;\n\n  try {\n    await AuthActions.checkIdExists(id);\n    this.setError(null, 'id');\n  } catch (e) {\n    this.setError('이미 존재하는 아이디입니다.', 'id');\n  }\n}, 300);\nexport const checkPhoneExists = debounce(async phone => {\n  const AuthActions = this.props.AuthActions;\n\n  try {\n    await AuthActions.checkPhoneExists(phone, 'null');\n    this.setError(null, 'phone');\n  } catch (e) {\n    this.setError('이미 존재하는 핸드폰 번호입니다.', 'phone');\n  }\n}, 300);\nexport const inputStyle = {\n  width: '15%',\n  left: '5%',\n  position: 'relative',\n  outline: 'none',\n  borderRadius: '0px',\n  lineHeight: '2.5rem',\n  fontSize: '1.2rem',\n  paddingLeft: '0.5rem',\n  fontFamily: 'Noto Sans KR',\n  fontStyle: 'normal',\n  paddingRight: '1rem',\n  marginRight: '1rem'\n};","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/containers/Auth/RegisterModule.js"],"names":["isEmail","isAlphanumeric","isLength","debounce","AuthAction","setAuthActions","AuthActions","setError","message","id","form","setErrorId","validate","email","value","min","max","password","RegExp","test","passwordConfirm","props","get","phone","comment","name","gender","checkEmailExists","e","checkIdExists","checkPhoneExists","inputStyle","width","left","position","outline","borderRadius","lineHeight","fontSize","paddingLeft","fontFamily","fontStyle","paddingRight","marginRight"],"mappings":"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","sourcesContent":["import {isEmail,isAlphanumeric,isLength} from 'validator';\r\nimport debounce from 'lodash/debounce';\r\n\r\nexport let AuthAction;\r\nconst setAuthActions = (AuthActions) => {\r\n    AuthAction = AuthActions;\r\n}\r\nexport {setAuthActions};\r\n\r\nconst setError = (message,id) => {\r\n    const{AuthActions} = this;\r\n    AuthActions.setError({form: 'register',message});\r\n    AuthActions.setErrorId({form: 'register',id});\r\n};\r\nexport {setError};\r\nexport const validate = {\r\n    email: (value) => {\r\n        if(!isEmail(value)){\r\n            this.setError('잘못된 이메일 형식 입니다.','email');\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n        id: (value) => {\r\n        if(!isAlphanumeric(value) || !isLength(value, {min:9, max: 15})) {\r\n            this.setError('아이디는 9~15 글자의 알파벳 혹은 숫자로 이루어져야 합니다.','id');\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    password: (value) => {\r\n        \r\n        if(!new RegExp(/^(?=.*\\d)(?=.*[~`!@#$%\\\\^&*()-])(?=.*[a-z])(?=.*[A-Z]).{9,12}$/).test(value)){\r\n            this.setError('비밀번호는 9~12 글자의 알파벳 (대소문자 구분), 숫자, 특수문자로 이루어져야 합니다.','password');\r\n            return false;\r\n        }\r\n        else if(new RegExp(/(\\w)\\1\\1\\1/).test(value)){\r\n            this.setError('비밀번호는 같은 문자를 4번 이상 사용할 수 없습니다.','password');\r\n            return false;\r\n        }\r\n        this.setError(null);\r\n        return true;\r\n    },\r\n    passwordConfirm: (value) => {\r\n        if(this.props.form.get('password') !== value){\r\n            this.setError('비밀번호 확인이 일치하지 않습니다.','passwordConfirm');\r\n            return false;\r\n        }\r\n        this.setError(null);\r\n        return true;\r\n    },\r\n    phone: (value)=> {\r\n        if(!new RegExp(/^01(?:0|1|[6-9])-(\\d{3}|\\d{4})-(\\d{4})$/).test(value)){\r\n            this.setError('핸드폰 번호는 01x-xxx(x)-xxxx와 같은 형태로 입력해야 합니다.','phone');\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    comment: (value)=> {\r\n        if(!isLength(value, {min:0, max: 50})){\r\n            this.setError('코멘트는 50자를 넘길 수 없습니다.','comment');\r\n            return false;\r\n        }\r\n        this.setError(null);\r\n        return true;\r\n    },\r\n    name: (value) => {\r\n        if(!isLength(value, {min:1, max: 30})){\r\n            this.setError('이름은 1자 이상 30자 이하여야 합니다.','name');\r\n            return false;\r\n        }\r\n        this.setError(null);\r\n        return true;\r\n    },\r\n    gender: (value) => {\r\n        if(value == null){\r\n            this.setError('성별은 반드시 입력해야 합니다.','gender');\r\n            return false;\r\n        }\r\n        this.setError(null);\r\n        return true;\r\n    }\r\n\r\n};\r\n\r\nexport const checkEmailExists = debounce(async (email) => {\r\n    const { AuthActions } = this.props;\r\n    try{\r\n        await AuthActions.checkEmailExists(email,'null');\r\n        this.setError(null,'email');\r\n    }catch(e){\r\n        this.setError('이미 존재하는 이메일입니다.','email');\r\n    }\r\n},300);\r\n\r\nexport const checkIdExists = debounce(async(id)=> {\r\n    const {AuthActions} = this.props;\r\n    try{\r\n        await AuthActions.checkIdExists(id);\r\n            this.setError(null,'id');\r\n        \r\n    } catch (e){\r\n        this.setError('이미 존재하는 아이디입니다.','id');\r\n    }\r\n},300);\r\n\r\nexport const checkPhoneExists = debounce(async(phone) => {\r\n    const {AuthActions} = this.props;\r\n    try{\r\n        await AuthActions.checkPhoneExists(phone,'null');\r\n            this.setError(null,'phone');\r\n        \r\n    }catch (e){\r\n        this.setError('이미 존재하는 핸드폰 번호입니다.','phone');\r\n    }\r\n},300);\r\n\r\nexport const inputStyle = {\r\n    width: '15%',\r\n    left: '5%',\r\n    position: 'relative',\r\noutline: 'none',\r\nborderRadius: '0px',\r\nlineHeight: '2.5rem',\r\nfontSize: '1.2rem',\r\npaddingLeft: '0.5rem',\r\nfontFamily: 'Noto Sans KR',\r\nfontStyle: 'normal',\r\npaddingRight: '1rem',\r\nmarginRight : '1rem'\r\n}\r\n"]},"metadata":{},"sourceType":"module"}