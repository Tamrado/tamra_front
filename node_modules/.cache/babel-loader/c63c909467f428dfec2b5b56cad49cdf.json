{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar fs = require('fs');\n\nvar child = require('child_process');\n\nvar DEFAULT_RESOLV_FILE = '/etc/resolv.conf';\n\nfunction getInterfaceName() {\n  var val = 'eth';\n  var platform = os.platform();\n\n  if (platform === 'darwin') {\n    val = 'en';\n  } else if (platform === 'win32') {\n    val = null;\n  }\n\n  return val;\n}\n\nfunction getIfconfigCMD() {\n  if (os.platform() === 'win32') {\n    return 'ipconfig/all';\n  }\n\n  return '/sbin/ifconfig';\n}\n/**\n * Get all addresses.\n *\n * @param {String} [interfaceName] interface name, default is 'eth' on linux, 'en' on mac os.\n * @param {Function(err, addr)} callback\n *  - {Object} addr {\n *    - {String} ip\n *    - {String} ipv6\n *    - {String} mac\n *  }\n */\n\n\nfunction address(interfaceName, callback) {\n  if (typeof interfaceName === 'function') {\n    callback = interfaceName;\n    interfaceName = null;\n  }\n\n  var addr = {\n    ip: address.ip(interfaceName),\n    ipv6: address.ipv6(interfaceName),\n    mac: null\n  };\n  address.mac(interfaceName, function (err, mac) {\n    if (mac) {\n      addr.mac = mac;\n    }\n\n    callback(err, addr);\n  });\n}\n\naddress.interface = function (family, name) {\n  var interfaces = os.networkInterfaces();\n  var noName = !name;\n  name = name || getInterfaceName();\n  family = family || 'IPv4';\n\n  for (var i = -1; i < 8; i++) {\n    var interfaceName = name + (i >= 0 ? i : ''); // support 'lo' and 'lo0'\n\n    var items = interfaces[interfaceName];\n\n    if (items) {\n      for (var j = 0; j < items.length; j++) {\n        var item = items[j];\n\n        if (item.family === family) {\n          return item;\n        }\n      }\n    }\n  }\n\n  if (noName) {\n    // filter 127.0.0.1, get the first ip\n    for (var k in interfaces) {\n      var items = interfaces[k];\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (item.family === family && item.address !== '127.0.0.1') {\n          return item;\n        }\n      }\n    }\n  }\n\n  return;\n};\n/**\n * Get current machine IPv4\n *\n * @param {String} [interfaceName] interface name, default is 'eth' on linux, 'en' on mac os.\n * @return {String} IP address\n */\n\n\naddress.ip = function (interfaceName) {\n  var item = address.interface('IPv4', interfaceName);\n  return item && item.address;\n};\n/**\n * Get current machine IPv6\n *\n * @param {String} [interfaceName] interface name, default is 'eth' on linux, 'en' on mac os.\n * @return {String} IP address\n */\n\n\naddress.ipv6 = function (interfaceName) {\n  var item = address.interface('IPv6', interfaceName);\n  return item && item.address;\n}; // osx start line 'en0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500'\n// linux start line 'eth0      Link encap:Ethernet  HWaddr 00:16:3E:00:0A:29  '\n\n\nvar MAC_OSX_START_LINE = /^(\\w+)\\:\\s+flags=/;\nvar MAC_LINUX_START_LINE = /^(\\w+)\\s{2,}link encap:\\w+/i; // ether 78:ca:39:b0:e6:7d\n// HWaddr 00:16:3E:00:0A:29\n\nvar MAC_RE = address.MAC_RE = /(?:ether|HWaddr)\\s+((?:[a-z0-9]{2}\\:){5}[a-z0-9]{2})/i; // osx: inet 192.168.2.104 netmask 0xffffff00 broadcast 192.168.2.255\n// linux: inet addr:10.125.5.202  Bcast:10.125.15.255  Mask:255.255.240.0\n\nvar MAC_IP_RE = address.MAC_IP_RE = /inet\\s(?:addr\\:)?(\\d+\\.\\d+\\.\\d+\\.\\d+)/;\n\nfunction getMAC(content, interfaceName, matchIP) {\n  var lines = content.split('\\n');\n\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].trimRight();\n    var m = MAC_OSX_START_LINE.exec(line) || MAC_LINUX_START_LINE.exec(line);\n\n    if (!m) {\n      continue;\n    } // check interface name\n\n\n    var name = m[1];\n\n    if (name.indexOf(interfaceName) !== 0) {\n      continue;\n    }\n\n    var ip = null;\n    var mac = null;\n    var match = MAC_RE.exec(line);\n\n    if (match) {\n      mac = match[1];\n    }\n\n    i++;\n\n    while (true) {\n      line = lines[i];\n\n      if (!line || MAC_OSX_START_LINE.exec(line) || MAC_LINUX_START_LINE.exec(line)) {\n        i--;\n        break; // hit next interface, handle next interface\n      }\n\n      if (!mac) {\n        match = MAC_RE.exec(line);\n\n        if (match) {\n          mac = match[1];\n        }\n      }\n\n      if (!ip) {\n        match = MAC_IP_RE.exec(line);\n\n        if (match) {\n          ip = match[1];\n        }\n      }\n\n      i++;\n    }\n\n    if (ip === matchIP) {\n      return mac;\n    }\n  }\n}\n/**\n * Get current machine MAC address\n *\n * @param {String} [interfaceName] interface name, default is 'eth' on linux, 'en' on mac os.\n * @param {Function(err, address)} callback\n */\n\n\naddress.mac = function (interfaceName, callback) {\n  if (typeof interfaceName === 'function') {\n    callback = interfaceName;\n    interfaceName = null;\n  }\n\n  interfaceName = interfaceName || getInterfaceName();\n  var item = address.interface('IPv4', interfaceName);\n\n  if (!item) {\n    return callback();\n  } // https://github.com/nodejs/node/issues/13581\n  // bug in node 7.x and <= 8.4.0\n\n\n  if (!process.env.CI && (item.mac === 'ff:00:00:00:00:00' || item.mac === '00:00:00:00:00:00')) {\n    // wrong address, ignore it\n    item.mac = '';\n  }\n\n  if (item.mac) {\n    return callback(null, item.mac);\n  }\n\n  child.exec(getIfconfigCMD(), {\n    timeout: 5000\n  }, function (err, stdout, stderr) {\n    if (err || !stdout) {\n      return callback(err);\n    }\n\n    var mac = getMAC(stdout || '', interfaceName, item.address);\n    callback(null, mac);\n  });\n}; // nameserver 172.24.102.254\n\n\nvar DNS_SERVER_RE = /^nameserver\\s+(\\d+\\.\\d+\\.\\d+\\.\\d+)$/i;\n/**\n * Get DNS servers.\n *\n * @param {String} [filepath] resolv config file path. default is '/etc/resolv.conf'.\n * @param {Function(err, servers)} callback\n */\n\naddress.dns = function (filepath, callback) {\n  if (typeof filepath === 'function') {\n    callback = filepath;\n    filepath = null;\n  }\n\n  filepath = filepath || DEFAULT_RESOLV_FILE;\n  fs.readFile(filepath, 'utf8', function (err, content) {\n    if (err) {\n      return callback(err);\n    }\n\n    var servers = [];\n    content = content || '';\n    var lines = content.split('\\n');\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i].trim();\n      var m = DNS_SERVER_RE.exec(line);\n\n      if (m) {\n        servers.push(m[1]);\n      }\n    }\n\n    callback(null, servers);\n  });\n};\n\nmodule.exports = address;","map":null,"metadata":{},"sourceType":"script"}