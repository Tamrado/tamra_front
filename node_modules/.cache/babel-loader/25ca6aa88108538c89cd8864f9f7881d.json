{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\fronttimeline\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport { pender } from 'redux-pender';\nimport * as UsersAPI from '../../lib/api/users';\nconst CHANGE_INPUT = 'userPage/CHANGE_INPUT';\nconst INITIALIZE_FORM = 'userPage/INITIALIZE_FORM';\nconst SET_ERROR = 'userPage/SET_ERROR';\nconst SET_USER_INFO = 'userPage/SET_USER_INFO';\nconst SET_USER_DATA = 'userPage/SET_USER_DATA';\nconst GET_USER_INFO = 'userPage/GET_USER_INFO';\nconst CHECK_USER_AND_GET_INFO = 'userPage/CHECK_USER_AND_GET_INFO';\nconst CHECK_USER_AND_GET_USER = 'userPage/CHECK_USER_AND_GET_USER';\nconst MODIFY_USER_INFO = 'userPage/MODIFY_USER_INFO';\nconst MODIFY_USER_IMAGE = 'userPage/MODIFY_USER_IMAGE';\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const setError = createAction(SET_ERROR);\nexport const setUserInfo = createAction(SET_USER_INFO);\nexport const setUserData = createAction(SET_USER_DATA);\nexport const getUserInfo = createAction(GET_USER_INFO, UsersAPI.getUserInfo);\nexport const checkUserAndGetInfo = createAction(CHECK_USER_AND_GET_INFO, UsersAPI.checkUserAndGetInfo);\nexport const checkUserAndGetUser = createAction(CHECK_USER_AND_GET_USER, UsersAPI.checkUserAndGetUser);\nexport const modifyUserInfo = createAction(MODIFY_USER_INFO, UsersAPI.modifyUserInfo);\nexport const modifyUserImage = createAction(MODIFY_USER_IMAGE, UsersAPI.modifyUserImage);\nconst initialState = Map({\n  info: Map({\n    thumbnail: null,\n    username: null\n  }),\n  User: Map({\n    form: Map({\n      id: '',\n      password: '',\n      passwordConfirm: '',\n      name: '',\n      email: '',\n      phone: '',\n      comment: '',\n      birthday: '',\n      gender: '',\n      address: ''\n    }),\n    error: null\n  }),\n  result: Map({})\n});\nexport default handleActions(_objectSpread({\n  [CHANGE_INPUT]: (state, action) => {\n    const _action$payload = action.payload,\n          form = _action$payload.form,\n          name = _action$payload.name,\n          value = _action$payload.value;\n    return state.setIn([form, 'form', name], value);\n  },\n  [INITIALIZE_FORM]: (state, action) => {\n    const initialForm = initialState.get(action.payload);\n    return state.set(action.payload, initialForm);\n  },\n  [SET_ERROR]: (state, action) => {\n    const _action$payload2 = action.payload,\n          form = _action$payload2.form,\n          message = _action$payload2.message;\n    return state.setIn([form, 'error'], message);\n  },\n  [SET_USER_INFO]: (state, action) => state.set('info', action.payload),\n  [SET_USER_DATA]: (state, action) => state.setIn(['User', 'form'], Map(action.payload))\n}, pender({\n  type: GET_USER_INFO,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n}), {}, pender({\n  type: CHECK_USER_AND_GET_INFO,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n}), {}, pender({\n  type: CHECK_USER_AND_GET_USER,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n}), {}, pender({\n  type: MODIFY_USER_INFO,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n}), {}, pender({\n  type: MODIFY_USER_IMAGE,\n  onSuccess: (state, action) => state.set('result', Map(action.payload.data))\n})), initialState);","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/redux/modules/userPage.js"],"names":["createAction","handleActions","Map","pender","UsersAPI","CHANGE_INPUT","INITIALIZE_FORM","SET_ERROR","SET_USER_INFO","SET_USER_DATA","GET_USER_INFO","CHECK_USER_AND_GET_INFO","CHECK_USER_AND_GET_USER","MODIFY_USER_INFO","MODIFY_USER_IMAGE","changeInput","initializeForm","setError","setUserInfo","setUserData","getUserInfo","checkUserAndGetInfo","checkUserAndGetUser","modifyUserInfo","modifyUserImage","initialState","info","thumbnail","username","User","form","id","password","passwordConfirm","name","email","phone","comment","birthday","gender","address","error","result","state","action","payload","value","setIn","initialForm","get","set","message","type","onSuccess","data"],"mappings":"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","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\r\n\r\nimport {Map} from 'immutable';\r\nimport {pender} from 'redux-pender';\r\nimport * as UsersAPI from '../../lib/api/users';\r\n\r\nconst CHANGE_INPUT = 'userPage/CHANGE_INPUT';\r\nconst INITIALIZE_FORM = 'userPage/INITIALIZE_FORM';\r\nconst SET_ERROR = 'userPage/SET_ERROR';\r\nconst SET_USER_INFO = 'userPage/SET_USER_INFO';\r\nconst SET_USER_DATA = 'userPage/SET_USER_DATA';\r\n\r\nconst GET_USER_INFO = 'userPage/GET_USER_INFO';\r\nconst CHECK_USER_AND_GET_INFO = 'userPage/CHECK_USER_AND_GET_INFO';\r\nconst CHECK_USER_AND_GET_USER = 'userPage/CHECK_USER_AND_GET_USER';\r\nconst MODIFY_USER_INFO = 'userPage/MODIFY_USER_INFO';\r\nconst MODIFY_USER_IMAGE = 'userPage/MODIFY_USER_IMAGE';\r\n\r\nexport const changeInput = createAction(CHANGE_INPUT);\r\nexport const initializeForm = createAction(INITIALIZE_FORM);\r\nexport const setError = createAction(SET_ERROR);\r\nexport const setUserInfo = createAction(SET_USER_INFO);\r\nexport const setUserData = createAction(SET_USER_DATA);\r\n\r\nexport const getUserInfo = createAction(GET_USER_INFO, UsersAPI.getUserInfo);\r\nexport const checkUserAndGetInfo = createAction(CHECK_USER_AND_GET_INFO, UsersAPI.checkUserAndGetInfo);\r\nexport const checkUserAndGetUser = createAction(CHECK_USER_AND_GET_USER,UsersAPI.checkUserAndGetUser);\r\nexport const modifyUserInfo = createAction(MODIFY_USER_INFO,UsersAPI.modifyUserInfo);\r\nexport const modifyUserImage = createAction(MODIFY_USER_IMAGE,UsersAPI.modifyUserImage);\r\n\r\nconst initialState = Map({\r\n    info: Map({\r\n        thumbnail: null, \r\n        username: null\r\n    }),\r\n    User: Map({\r\n        form : Map({\r\n            id : '',\r\n            password: '',\r\n            passwordConfirm: '',\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            comment: '',\r\n            birthday : '',\r\n            gender : '',\r\n            address : ''\r\n        }),\r\n        error : null,\r\n    }),\r\n    result: Map({})\r\n});\r\n\r\nexport default handleActions({\r\n    [CHANGE_INPUT]:(state, action) => {\r\n        const {form,name,value}=action.payload;\r\n        return state.setIn([form,'form',name], value);\r\n    },\r\n    [INITIALIZE_FORM]: (state, action) => {\r\n        const initialForm = initialState.get(action.payload);\r\n        return state.set(action.payload, initialForm);\r\n    },\r\n    [SET_ERROR]: (state, action)=> {\r\n        const {form, message} = action.payload;\r\n        return state.setIn([form, 'error'],message);\r\n    },\r\n    [SET_USER_INFO]:(state,action) => state.set('info',action.payload),\r\n\r\n    [SET_USER_DATA] : (state,action) => state.setIn(['User','form'],Map(action.payload)),\r\n\r\n    ...pender({\r\n        type: GET_USER_INFO,\r\n        onSuccess: (state,action) => state.set('result',Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: CHECK_USER_AND_GET_INFO,\r\n        onSuccess: (state,action) => state.set('result',Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: CHECK_USER_AND_GET_USER,\r\n        onSuccess : (state,action) => state.set('result',Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: MODIFY_USER_INFO,\r\n        onSuccess : (state,action) => state.set('result',Map(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type: MODIFY_USER_IMAGE,\r\n        onSuccess : (state,action) => state.set('result',Map(action.payload.data))\r\n    })\r\n},initialState);"]},"metadata":{},"sourceType":"module"}