{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\fronttimeline\\\\src\\\\containers\\\\Base\\\\PostListContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PageWrapper from '../../components/PageWrapper';\nimport { FeedList } from '../../components/PostList';\nimport { bindActionCreators } from 'redux';\nimport * as friendActions from '../../redux/modules/friend';\nimport * as postActions from '../../redux/modules/post';\nimport * as timelineActions from '../../redux/modules/timeline';\nimport * as searchActions from '../../redux/modules/search';\nimport * as likeActions from '../../redux/modules/like';\nimport * as commentActions from '../../redux/modules/comment';\nimport storage from '../../lib/storage';\nimport { dateTimeToFormatted } from '../Function/dateTimeModule';\n\nclass PostListContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.openWriteModal = () => {\n      this.props.PostActions.setWriteDisplay('block');\n    };\n\n    this.handleScroll = async e => {\n      const scrollTop = e.srcElement.scrollingElement.scrollTop;\n      const _window = window,\n            innerHeight = _window.innerHeight;\n      const scrollHeight = document.body.scrollHeight;\n\n      if (scrollTop + innerHeight > scrollHeight & this.props.isTruePost) {\n        this.getFeedList();\n        await this.props.TimelineActions.addPage();\n      }\n    };\n\n    this.componentDidMount = async () => {\n      window.addEventListener(\"scroll\", this.handleScroll);\n      if (!storage.get('loggedInfo')) return;\n      await this.props.PostActions.setWrittenData(storage.get('loggedInfo').nickname + '님 무슨 일이 있으셨나요?');\n      await this.getFeedList();\n      await this.props.TimelineActions.addPage();\n    };\n\n    this.getFeedList = async () => {\n      const _this$props = this.props,\n            TimelineActions = _this$props.TimelineActions,\n            page = _this$props.page,\n            isTruePost = _this$props.isTruePost;\n\n      if (isTruePost) {\n        try {\n          await TimelineActions.getMainInformation(page);\n          await this.setPostTime();\n        } catch (e) {\n          await TimelineActions.setFalsePost();\n        }\n      }\n    };\n\n    this.setPostTime = async () => {\n      const _this$props2 = this.props,\n            data = _this$props2.data,\n            TimelineActions = _this$props2.TimelineActions;\n      await Promise.all(data.map(async (feed, index) => {\n        let time = feed.getIn(['feed', 'timestamp']);\n        let timestring = dateTimeToFormatted(time);\n        await TimelineActions.setTime({\n          timestring: timestring,\n          index: index\n        });\n      }));\n    };\n\n    this.setCommentTime = async id => {\n      const _this$props3 = this.props,\n            data = _this$props3.data,\n            TimelineActions = _this$props3.TimelineActions;\n      let index = data.findIndex(item => item.getIn(['feed', 'postId']) === parseInt(id));\n      const comments = data.getIn([index, 'feed', 'commentList']);\n      await Promise.all(comments.map(async (comment, commentIndex) => {\n        console.log(comment.timestamp);\n        let time = comment.timestamp;\n        let timestring = this.dateTimeToFormatted(time);\n        await TimelineActions.setCommentTime({\n          timestring: timestring,\n          index: index,\n          commentIndex: commentIndex\n        });\n      }));\n    };\n\n    this.overHashTag = e => {\n      const TimelineActions = this.props.TimelineActions;\n      TimelineActions.setHashDisplay('block');\n      TimelineActions.setKey(e.target.id);\n      TimelineActions.setCategoryId(e.target.dataset.category);\n    };\n\n    this.outHashTag = e => {\n      const TimelineActions = this.props.TimelineActions;\n      TimelineActions.setHashDisplay('none');\n    };\n\n    this.handleStateClick = e => {\n      window.location.href = `/@:${e.target.id}`;\n    };\n\n    this.handleLikeClick = async e => {\n      const _this$props4 = this.props,\n            LikeActions = _this$props4.LikeActions,\n            TimelineActions = _this$props4.TimelineActions;\n      const id = e.target.id;\n      await TimelineActions.setLikeKey(id);\n      await LikeActions.clickLike(id);\n      await TimelineActions.setLike('none');\n\n      try {\n        await LikeActions.getLikeAndUserList(id, 1);\n      } catch (e) {}\n\n      const totalNum = this.props.totalNum;\n      await TimelineActions.setLikeNum(totalNum);\n    };\n\n    this.dateTimeToFormatted = dt => {\n      const min = 60 * 1000;\n      const c = new Date();\n      var d = new Date(dt);\n      var minsAgo = Math.floor((c - d) / min);\n      var result = {\n        'raw': d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? '' : '0') + (d.getMonth() + 1) + '-' + (d.getDate() > 9 ? '' : '0') + d.getDate() + ' ' + (d.getHours() > 9 ? '' : '0') + d.getHours() + ':' + (d.getMinutes() > 9 ? '' : '0') + d.getMinutes() + ':' + (d.getSeconds() > 9 ? '' : '0') + d.getSeconds(),\n        'month': d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? '' : '0') + (d.getMonth() + 1) + '-' + (d.getDate() > 9 ? '' : '0') + d.getDate(),\n        'formatted': ''\n      };\n\n      if (minsAgo < 60) {\n        // 1시간 내\n        result.formatted = minsAgo + '분 전';\n      } else if (minsAgo < 60 * 24) {\n        // 하루 내\n        result.formatted = Math.floor(minsAgo / 60) + '시간 전';\n      } else if (minsAgo < 60 * 24 * 30) {\n        // 하루 이상\n        result.formatted = Math.floor(minsAgo / 60 / 24) + '일 전';\n      } else {\n        result.formatted = result.month;\n      }\n\n      return result.formatted;\n    };\n\n    this.handleCancelClick = async e => {\n      const _this$props5 = this.props,\n            LikeActions = _this$props5.LikeActions,\n            TimelineActions = _this$props5.TimelineActions;\n      const id = e.target.id;\n      await TimelineActions.setLikeKey(id);\n      await LikeActions.cancelLike(id);\n      await TimelineActions.setLike('block');\n\n      try {\n        await LikeActions.getLikeAndUserList(id, 1);\n      } catch (e) {}\n\n      const totalNum = this.props.totalNum;\n      await TimelineActions.setLikeNum(totalNum);\n    };\n\n    this.handleComment = async e => {\n      const _this$props6 = this.props,\n            CommentActions = _this$props6.CommentActions,\n            TimelineActions = _this$props6.TimelineActions,\n            data = _this$props6.data;\n      const id = e.target.id;\n      const category = e.target.dataset.category;\n      await TimelineActions.setCommentCategory(category);\n      await TimelineActions.setCommentDisplay(id);\n      const commentdisplay = this.props.commentdisplay;\n\n      if (commentdisplay === 'block') {\n        let index = data.findIndex(item => item.getIn(['feed', 'postId']) === parseInt(id));\n        let page = data.getIn([index, 'feed', 'commentPage']);\n        await CommentActions.showPostCommentList(id, page);\n        await TimelineActions.setCommentPage(id);\n        const _this$props7 = this.props,\n              commentList = _this$props7.commentList,\n              lastComment = _this$props7.lastComment;\n        if (lastComment) await TimelineActions.setCommentList({\n          'commentId': id,\n          'commentList': commentList,\n          'trueComment': false\n        });else await TimelineActions.setCommentList({\n          'commentId': id,\n          'commentList': commentList,\n          'trueComment': true\n        });\n        await this.setCommentTime(id);\n      }\n    };\n\n    this.handleCommentAdd = async e => {\n      const id = e.target.id;\n      const _this$props8 = this.props,\n            TimelineActions = _this$props8.TimelineActions,\n            CommentActions = _this$props8.CommentActions,\n            data = _this$props8.data;\n      const index = data.findIndex(item => item.getIn(['feed', 'postId']) === parseInt(id));\n\n      if (data.getIn([index, 'feed', 'trueComment'])) {\n        const page = data.getIn([index, 'feed', 'commentPage']);\n\n        try {\n          await CommentActions.showPostCommentList(id, page);\n          await TimelineActions.setCommentPage(id);\n          const _this$props9 = this.props,\n                commentList = _this$props9.commentList,\n                lastComment = _this$props9.lastComment;\n          if (lastComment) await TimelineActions.setCommentList({\n            'commentId': id,\n            'commentList': commentList,\n            'trueComment': false\n          });else await TimelineActions.setCommentList({\n            'commentId': id,\n            'commentList': commentList,\n            'trueComment': true\n          });\n          await this.setCommentTime(id);\n        } catch (e) {\n          TimelineActions.setCommentFalse(id);\n        }\n      }\n    };\n\n    this.enterComment = async e => {\n      if (window.event.keyCode === 13) {\n        const _this$props10 = this.props,\n              CommentActions = _this$props10.CommentActions,\n              TimelineActions = _this$props10.TimelineActions;\n        const _e$target = e.target,\n              innerText = _e$target.innerText,\n              id = _e$target.id;\n        console.log(id);\n        var content = innerText;\n        content = content.replace(/\\r/g, \"\");\n        content = content.replace(/\\n/g, \"\");\n        await CommentActions.writeComment({\n          id,\n          content\n        });\n        await CommentActions.showPostCommentList(id, 1);\n        this.renewComment(id);\n\n        for (var i = 0; i < document.getElementsByName('^^comment').length; i++) {\n          if (parseInt(document.getElementsByName('^^comment')[i].id) === parseInt(id)) {\n            document.getElementsByName('^^comment')[i].textContent = '';\n            document.getElementsByName('^^comment')[i].blur();\n          }\n        }\n\n        await CommentActions.getCommentNum(id);\n        var commentNum = this.props.commentNum;\n        await TimelineActions.setCommentNum({\n          'commentNum': commentNum,\n          'commentId': id\n        });\n        await this.setCommentTime(id);\n      }\n    };\n\n    this.renewComment = id => setTimeout(async () => {\n      const _this$props11 = this.props,\n            presentComment = _this$props11.presentComment,\n            TimelineActions = _this$props11.TimelineActions;\n      await TimelineActions.renewComment({\n        'commentId': id,\n        'presentComment': presentComment\n      });\n      await this.setCommentTime(id);\n    }, 2000);\n\n    this.handleImage = e => {\n      const id = e.target.id;\n      const imageid = e.target.dataset.imageid;\n      this.props.history.push(`/feed/@:${id}/image/:${imageid}`);\n    };\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    return prevProps.data !== this.props.data;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (snapshot) {\n      this.setPostTime();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.data !== nextProps.data || this.props.writtenData !== nextProps.writtenData || this.props.hashdisplay !== nextProps.hashdisplay;\n  }\n\n  render() {\n    const data = this.props.data;\n    const style = {\n      lineHeight: '160%'\n    };\n\n    if (!storage.get('loggedInfo')) {\n      return null;\n    }\n\n    const username = storage.get('loggedInfo').nickname;\n    const thumbnail = storage.get('loggedInfo').thumbnail;\n    const _this$props12 = this.props,\n          writtenData = _this$props12.writtenData,\n          hashdisplay = _this$props12.hashdisplay,\n          keyid = _this$props12.keyid,\n          category = _this$props12.category,\n          totalNum = _this$props12.totalNum,\n          commentCategory = _this$props12.commentCategory,\n          PostActions = _this$props12.PostActions;\n    const openWriteModal = this.openWriteModal,\n          overHashTag = this.overHashTag,\n          outHashTag = this.outHashTag,\n          handleStateClick = this.handleStateClick,\n          handleLikeClick = this.handleLikeClick,\n          enterComment = this.enterComment,\n          handleCommentAdd = this.handleCommentAdd,\n          handleCancelClick = this.handleCancelClick,\n          handleComment = this.handleComment,\n          handleImage = this.handleImage;\n    if (writtenData === '') PostActions.setWrittenData(`${username}님, 무슨 일이 있으셨나요?`);\n    return React.createElement(PageWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(FeedList, {\n      mainfeed: data,\n      username: username,\n      onclick: openWriteModal,\n      stateclick: handleStateClick,\n      content: writtenData.split('\\n').map((line, index) => {\n        return React.createElement(\"div\", {\n          key: index,\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }, line, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }));\n      }),\n      hover: overHashTag,\n      nothover: outHashTag,\n      hashdisplay: hashdisplay,\n      keyid: keyid,\n      like: handleLikeClick,\n      category: category,\n      cancel: handleCancelClick,\n      totalNum: totalNum,\n      handleComment: handleComment,\n      handleCommentAdd: handleCommentAdd,\n      thumbnail: thumbnail,\n      commentCategory: commentCategory,\n      enterComment: enterComment,\n      handleImage: handleImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  writtenData: state.post.get('writtenData'),\n  data: state.timeline.get('mainfeed'),\n  page: state.timeline.get('page'),\n  isTruePost: state.timeline.get('isTruePost'),\n  hashdisplay: state.timeline.get('hashdisplay'),\n  keyid: state.timeline.get('keyid'),\n  category: state.timeline.get('categoryid'),\n  totalNum: state.like.get('totalNum'),\n  commentList: state.comment.get('commentList'),\n  commentNum: state.comment.get('commentNum'),\n  commentCategory: state.timeline.get('commentCategory'),\n  commentdisplay: state.timeline.get('commentdisplay'),\n  postId: state.post.get('postId'),\n  presentComment: state.comment.get('presentComment'),\n  lastComment: state.comment.get('lastComment')\n}), dispatch => ({\n  TimelineActions: bindActionCreators(timelineActions, dispatch),\n  FriendActions: bindActionCreators(friendActions, dispatch),\n  SearchActions: bindActionCreators(searchActions, dispatch),\n  PostActions: bindActionCreators(postActions, dispatch),\n  LikeActions: bindActionCreators(likeActions, dispatch),\n  CommentActions: bindActionCreators(commentActions, dispatch)\n}))(PostListContainer);","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/containers/Base/PostListContainer.js"],"names":["React","Component","connect","PageWrapper","FeedList","bindActionCreators","friendActions","postActions","timelineActions","searchActions","likeActions","commentActions","storage","dateTimeToFormatted","PostListContainer","openWriteModal","props","PostActions","setWriteDisplay","handleScroll","e","scrollTop","srcElement","scrollingElement","window","innerHeight","scrollHeight","document","body","isTruePost","getFeedList","TimelineActions","addPage","componentDidMount","addEventListener","get","setWrittenData","nickname","page","getMainInformation","setPostTime","setFalsePost","data","Promise","all","map","feed","index","time","getIn","timestring","setTime","setCommentTime","id","findIndex","item","parseInt","comments","comment","commentIndex","console","log","timestamp","overHashTag","setHashDisplay","setKey","target","setCategoryId","dataset","category","outHashTag","handleStateClick","location","href","handleLikeClick","LikeActions","setLikeKey","clickLike","setLike","getLikeAndUserList","totalNum","setLikeNum","dt","min","c","Date","d","minsAgo","Math","floor","result","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","formatted","month","handleCancelClick","cancelLike","handleComment","CommentActions","setCommentCategory","setCommentDisplay","commentdisplay","showPostCommentList","setCommentPage","commentList","lastComment","setCommentList","handleCommentAdd","setCommentFalse","enterComment","event","keyCode","innerText","content","replace","writeComment","renewComment","i","getElementsByName","length","textContent","blur","getCommentNum","commentNum","setCommentNum","setTimeout","presentComment","handleImage","imageid","history","push","getSnapshotBeforeUpdate","prevProps","prevState","componentDidUpdate","snapshot","shouldComponentUpdate","nextProps","nextState","writtenData","hashdisplay","render","style","lineHeight","username","thumbnail","keyid","commentCategory","split","line","state","post","timeline","like","postId","dispatch","FriendActions","SearchActions"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PageWrapper from '../../components/PageWrapper';\r\nimport {FeedList} from '../../components/PostList';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as friendActions from '../../redux/modules/friend';\r\nimport * as postActions from '../../redux/modules/post';\r\nimport * as timelineActions from '../../redux/modules/timeline';\r\nimport * as searchActions from '../../redux/modules/search';\r\nimport * as likeActions from '../../redux/modules/like';\r\nimport * as commentActions from '../../redux/modules/comment';\r\nimport storage from '../../lib/storage';\r\nimport {dateTimeToFormatted} from '../Function/dateTimeModule';\r\nclass PostListContainer extends Component{\r\n    openWriteModal = () => {\r\n        this.props.PostActions.setWriteDisplay('block');\r\n    }\r\n    handleScroll = async(e) => {\r\n        const scrollTop =e.srcElement.scrollingElement.scrollTop;\r\n        const { innerHeight } = window;\r\n      const { scrollHeight } = document.body;\r\n    \r\n      if (scrollTop+innerHeight >scrollHeight & this.props.isTruePost) {\r\n        this.getFeedList();\r\n        await this.props.TimelineActions.addPage();\r\n        }\r\n    }\r\n    componentDidMount= async() =>{\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n        if(!storage.get('loggedInfo')) return ;\r\n        await this.props.PostActions.setWrittenData(storage.get('loggedInfo').nickname + '님 무슨 일이 있으셨나요?');\r\n         await this.getFeedList();\r\n        await this.props.TimelineActions.addPage();\r\n      }\r\n\r\n      getFeedList = async() => {\r\n        const{TimelineActions,page,isTruePost} = this.props;\r\n        if(isTruePost){\r\n            try{\r\n                await TimelineActions.getMainInformation(page);\r\n                await this.setPostTime();\r\n            }catch(e){\r\n                await TimelineActions.setFalsePost();\r\n            }\r\n            \r\n        }\r\n    }\r\n    setPostTime = async() => {\r\n        const{data,TimelineActions} = this.props;\r\n                await Promise.all(\r\n                    data.map(\r\n                        async(feed,index) => {\r\n                            let time = feed.getIn(['feed','timestamp']);\r\n                            let timestring = dateTimeToFormatted(time);\r\n                            await TimelineActions.setTime({timestring:timestring,index : index});\r\n                        }\r\n                    )\r\n                );\r\n    }\r\n\r\n    setCommentTime = async(id) => {\r\n        const{data,TimelineActions} = this.props;\r\n        let index = data.findIndex(item => item.getIn(['feed','postId'])===parseInt(id));\r\n        const comments = data.getIn([index,'feed','commentList']);\r\n                await Promise.all(\r\n                    comments.map(\r\n                        async(comment,commentIndex) => {\r\n                            console.log(comment.timestamp);\r\n                            let time = comment.timestamp;\r\n                            let timestring = this.dateTimeToFormatted(time);\r\n                            await TimelineActions.setCommentTime({timestring:timestring,index : index,commentIndex:commentIndex});\r\n                        }\r\n                    )\r\n                );\r\n    }\r\n    \r\n    overHashTag = (e) =>{\r\n        const {TimelineActions} = this.props;\r\n        TimelineActions.setHashDisplay('block');\r\n        TimelineActions.setKey(e.target.id);\r\n        TimelineActions.setCategoryId(e.target.dataset.category);\r\n    }\r\n    outHashTag = (e) =>{\r\n        const {TimelineActions} = this.props;\r\n        TimelineActions.setHashDisplay('none');\r\n          \r\n    }\r\n    handleStateClick = (e) =>{\r\n        window.location.href =`/@:${e.target.id}`;\r\n    }\r\n    handleLikeClick = async(e) =>{\r\n        const {LikeActions,TimelineActions} = this.props;\r\n        const id = e.target.id;\r\n        await TimelineActions.setLikeKey(id);\r\n        await LikeActions.clickLike(id);\r\n        await TimelineActions.setLike('none');\r\n        try{\r\n        await LikeActions.getLikeAndUserList(id,1);\r\n        }catch(e){}\r\n        const {totalNum} = this.props;\r\n        await TimelineActions.setLikeNum(totalNum);\r\n           \r\n    }\r\n     dateTimeToFormatted=(dt)=> {\r\n\t\tconst min = 60 * 1000;\r\n\t\tconst c = new Date();\r\n\t\tvar d = new Date(dt);\r\n\t\tvar minsAgo = Math.floor((c - d) / (min));\r\n\r\n\t\tvar result = {\r\n            'raw': d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? '' : '0') + (d.getMonth() + 1) \r\n            + '-' + (d.getDate() > 9 ? '' : '0') +  d.getDate() + ' ' + (d.getHours() > 9 ? '' : '0') \r\n            +  d.getHours() + ':' + (d.getMinutes() > 9 ? '' : '0') +  d.getMinutes() + ':'  \r\n            + (d.getSeconds() > 9 ? '' : '0') +  d.getSeconds(),\r\n            'month' : d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? '' : '0') + (d.getMonth() + 1) \r\n            + '-' + (d.getDate() > 9 ? '' : '0') +  d.getDate(),\r\n\t\t\t'formatted': ''\r\n\t\t};\r\n\r\n\t\tif (minsAgo < 60) { // 1시간 내\r\n\t\t\tresult.formatted = minsAgo + '분 전';\r\n\t\t} else if (minsAgo < 60 * 24) { // 하루 내\r\n\t\t\tresult.formatted = Math.floor(minsAgo / 60) + '시간 전';\r\n\t\t} else if(minsAgo < 60 * 24 * 30) { // 하루 이상\r\n\t\t\tresult.formatted = Math.floor(minsAgo / 60 / 24) + '일 전';\r\n\t\t} else{\r\n            result.formatted = result.month;\r\n        }\r\n\t\treturn result.formatted;\r\n\t};\r\n    handleCancelClick =async(e) => {\r\n        const {LikeActions,TimelineActions} = this.props;\r\n        const id = e.target.id;\r\n        await TimelineActions.setLikeKey(id);\r\n        await LikeActions.cancelLike(id);\r\n        await TimelineActions.setLike('block');\r\n        try{\r\n        await LikeActions.getLikeAndUserList(id,1);\r\n        }catch(e){}\r\n        const {totalNum} = this.props;\r\n        await TimelineActions.setLikeNum(totalNum);\r\n    }\r\n    handleComment =async(e)=>{\r\n        const {CommentActions,TimelineActions,data} = this.props;\r\n        const {id} = e.target;\r\n        const {category} = e.target.dataset;\r\n        await TimelineActions.setCommentCategory(category);\r\n        await TimelineActions.setCommentDisplay(id);\r\n        const{commentdisplay} = this.props;\r\n        if(commentdisplay === 'block'){\r\n            let index = data.findIndex(item => item.getIn(['feed','postId'])===parseInt(id));\r\n            let page = data.getIn([index,'feed','commentPage']);\r\n            await CommentActions.showPostCommentList(id,page);\r\n            await TimelineActions.setCommentPage(id);\r\n            const{commentList,lastComment}=this.props;\r\n            if(lastComment)\r\n            await TimelineActions.setCommentList({'commentId' : id,'commentList':commentList,'trueComment' :false});\r\n            else\r\n            await TimelineActions.setCommentList({'commentId' : id,'commentList':commentList,'trueComment' :true});\r\n            await this.setCommentTime(id);\r\n        }\r\n    }\r\n\r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        return prevProps.data !== this.props.data;\r\n    }\r\n   componentDidUpdate(prevProps, prevState, snapshot){\r\n        if(snapshot){\r\n            this.setPostTime();\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.data !== nextProps.data || this.props.writtenData !== nextProps.writtenData ||\r\n        this.props.hashdisplay !== nextProps.hashdisplay;\r\n    }\r\n    handleCommentAdd = async(e) =>{\r\n        const {id} = e.target;\r\n        const {TimelineActions,CommentActions,data} = this.props;\r\n        const index = data.findIndex(item => item.getIn(['feed','postId']) ===parseInt(id));\r\n        if(data.getIn([index,'feed','trueComment'])){\r\n            \r\n            const page = data.getIn([index,'feed','commentPage']);\r\n            try{\r\n                await CommentActions.showPostCommentList(id,page);\r\n                await TimelineActions.setCommentPage(id);\r\n                const{commentList,lastComment}=this.props;\r\n            if(lastComment)\r\n            await TimelineActions.setCommentList({'commentId':id,'commentList':commentList,'trueComment' :false});\r\n            else\r\n            await TimelineActions.setCommentList({'commentId':id,'commentList':commentList,'trueComment' :true});\r\n            await this.setCommentTime(id);\r\n            }catch(e){\r\n                TimelineActions.setCommentFalse(id);\r\n            }\r\n        } \r\n    }\r\n    enterComment = async(e) =>{\r\n        if(window.event.keyCode === 13){\r\n            const {CommentActions,TimelineActions} = this.props;\r\n            const {innerText,id} = e.target;\r\n            console.log(id);\r\n            var content = innerText;\r\n            content = content.replace(/\\r/g, \"\");\r\n            content = content.replace(/\\n/g, \"\");\r\n            await CommentActions.writeComment({id,content});\r\n            await CommentActions.showPostCommentList(id,1);\r\n            this.renewComment(id);\r\n            for(var i = 0; i < document.getElementsByName('^^comment').length; i++){\r\n                if(parseInt(document.getElementsByName('^^comment')[i].id) === parseInt(id)){\r\n                    document.getElementsByName('^^comment')[i].textContent = '';\r\n                    document.getElementsByName('^^comment')[i].blur();\r\n                }\r\n            }\r\n            await CommentActions.getCommentNum(id);\r\n            var {commentNum} = this.props;\r\n            await TimelineActions.setCommentNum({'commentNum':commentNum,'commentId':id});\r\n            await this.setCommentTime(id);\r\n            \r\n        }\r\n    }\r\n    renewComment=(id)=>\r\n        setTimeout(async()=>{\r\n            const {presentComment,TimelineActions} = this.props;\r\n            await TimelineActions.renewComment({'commentId' : id,'presentComment':presentComment});\r\n            await this.setCommentTime(id);\r\n        },2000);\r\n\r\n    handleImage =(e) =>{\r\n        const {id} = e.target;\r\n        const {imageid} = e.target.dataset;\r\n        this.props.history.push(`/feed/@:${id}/image/:${imageid}`);\r\n    }\r\n    render(){\r\n        \r\n        const {data} = this.props;\r\n        const style = {\r\n            lineHeight: '160%'\r\n        };\r\n        if(!storage.get('loggedInfo')) {\r\n            \r\n            return null;\r\n        }\r\n        const username = storage.get('loggedInfo').nickname;\r\n        const thumbnail = storage.get('loggedInfo').thumbnail;\r\n        const {writtenData,hashdisplay,keyid,category,totalNum,commentCategory,PostActions} = this.props;\r\n        const {openWriteModal,overHashTag,outHashTag,handleStateClick,handleLikeClick,enterComment,handleCommentAdd\r\n            ,handleCancelClick,handleComment,handleImage} = this;\r\n        if(writtenData === '') PostActions.setWrittenData(`${username}님, 무슨 일이 있으셨나요?`);\r\n        return(\r\n            <PageWrapper>\r\n            <FeedList mainfeed={data} username = {username} onclick = {openWriteModal} stateclick={handleStateClick} content ={\r\n                writtenData.split('\\n').map( (line,index) => {\r\n            return (<div key={index} style={style} >{line}<br/></div>)\r\n          })}\r\n           hover = {overHashTag} nothover={outHashTag} hashdisplay={hashdisplay} keyid = {keyid} like={handleLikeClick}\r\n         category = {category} cancel={handleCancelClick} totalNum={totalNum} handleComment={handleComment} handleCommentAdd = {handleCommentAdd}\r\n          thumbnail={thumbnail} commentCategory={commentCategory} enterComment={enterComment} handleImage={handleImage}/>\r\n         \r\n            </PageWrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        writtenData : state.post.get('writtenData'),\r\n        data : state.timeline.get('mainfeed'),\r\n        page : state.timeline.get('page'),\r\n        isTruePost : state.timeline.get('isTruePost'),\r\n        hashdisplay : state.timeline.get('hashdisplay'),\r\n        keyid : state.timeline.get('keyid'),\r\n        category : state.timeline.get('categoryid'),\r\n        totalNum : state.like.get('totalNum'),\r\n        commentList : state.comment.get('commentList'),\r\n        commentNum : state.comment.get('commentNum'),\r\n        commentCategory : state.timeline.get('commentCategory'),\r\n        commentdisplay : state.timeline.get('commentdisplay'),\r\n        postId : state.post.get('postId'),\r\n        presentComment : state.comment.get('presentComment'),\r\n        lastComment : state.comment.get('lastComment')\r\n    }),\r\n    (dispatch) => ({\r\n        TimelineActions: bindActionCreators(timelineActions, dispatch),\r\n        FriendActions: bindActionCreators(friendActions, dispatch),\r\n        SearchActions : bindActionCreators(searchActions,dispatch),\r\n        PostActions : bindActionCreators(postActions,dispatch),\r\n        LikeActions : bindActionCreators(likeActions,dispatch),\r\n        CommentActions : bindActionCreators(commentActions,dispatch)\r\n\r\n    })\r\n)(PostListContainer);"]},"metadata":{},"sourceType":"module"}