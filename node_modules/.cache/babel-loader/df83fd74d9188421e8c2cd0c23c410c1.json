{"ast":null,"code":"//로컬 스토리지에 JSON 형태로 저장/ 불러오기/ 삭제 헬퍼\nconst storage = {\n  set: (key, object) => {\n    if (!localStorage) return;\n    localStorage[key] = typeof object === 'string' ? object : JSON.stringify(object);\n  },\n  get: key => {\n    if (!localStorage) return null;\n\n    if (!localStorage[key]) {\n      return null;\n    }\n\n    try {\n      const parsed = JSON.parse(localStorage[key]);\n      return parsed;\n    } catch (e) {\n      return localStorage[key];\n    }\n  },\n  remove: key => {\n    if (!localStorage) return null;\n\n    if (localStorage[key]) {\n      localStorage.removeItem(key);\n    }\n  }\n};\nexport default storage;","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/lib/storage.js"],"names":["storage","set","key","object","localStorage","JSON","stringify","get","parsed","parse","e","remove","removeItem"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG;AACZC,EAAAA,GAAG,EAAG,CAACC,GAAD,EAAKC,MAAL,KAAgB;AAClB,QAAG,CAACC,YAAJ,EAAkB;AAClBA,IAAAA,YAAY,CAACF,GAAD,CAAZ,GAAqB,OAAOC,MAAR,KAAoB,QAApB,GAA+BA,MAA/B,GAAwCE,IAAI,CAACC,SAAL,CAAeH,MAAf,CAA5D;AACH,GAJW;AAKZI,EAAAA,GAAG,EAAIL,GAAD,IAAS;AACX,QAAG,CAACE,YAAJ,EAAkB,OAAO,IAAP;;AAElB,QAAG,CAACA,YAAY,CAACF,GAAD,CAAhB,EAAsB;AAClB,aAAO,IAAP;AACH;;AACD,QAAI;AACA,YAAMM,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,YAAY,CAACF,GAAD,CAAvB,CAAf;AACA,aAAOM,MAAP;AACH,KAHD,CAGE,OAAME,CAAN,EAAQ;AACN,aAAON,YAAY,CAACF,GAAD,CAAnB;AACH;AACJ,GAjBW;AAkBZS,EAAAA,MAAM,EAAGT,GAAD,IAAS;AACb,QAAG,CAACE,YAAJ,EAAkB,OAAO,IAAP;;AAElB,QAAGA,YAAY,CAACF,GAAD,CAAf,EAAqB;AACjBE,MAAAA,YAAY,CAACQ,UAAb,CAAwBV,GAAxB;AACH;AACJ;AAxBW,CAAhB;AA2BA,eAAeF,OAAf","sourcesContent":["//로컬 스토리지에 JSON 형태로 저장/ 불러오기/ 삭제 헬퍼\r\nconst storage = {\r\n    set : (key,object) => {\r\n        if(!localStorage) return;\r\n        localStorage[key] = (typeof object) === 'string' ? object : JSON.stringify(object);\r\n    },\r\n    get : (key) => {\r\n        if(!localStorage) return null;\r\n\r\n        if(!localStorage[key]){\r\n            return null;\r\n        }\r\n        try {\r\n            const parsed = JSON.parse(localStorage[key]);\r\n            return parsed;\r\n        } catch(e){\r\n            return localStorage[key];\r\n        }\r\n    },\r\n    remove: (key) => {\r\n        if(!localStorage) return null;\r\n\r\n        if(localStorage[key]){\r\n            localStorage.removeItem(key);\r\n        }\r\n    }\r\n};\r\n\r\nexport default storage;"]},"metadata":{},"sourceType":"module"}