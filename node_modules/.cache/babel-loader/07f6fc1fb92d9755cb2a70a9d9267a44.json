{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\fronttimeline\\\\src\\\\containers\\\\Base\\\\WriteBoxContainer.js\";\nimport { List, Map } from 'immutable';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { WriteBox, ImageList } from '../../components/Post';\nimport { PostPopup, Popup } from '../../components/Popup';\nimport { bindActionCreators } from 'redux';\nimport * as postActions from '../../redux/modules/post';\nimport * as searchActions from '../../redux/modules/search';\nimport * as timelineActions from '../../redux/modules/timeline';\nimport storage from '../../lib/storage';\nimport ShowLevelMenu from '../../components/Post/ShowLevelMenu';\n\nclass WriteBoxContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      opacity: 0.8,\n      showLevelDisplay: 'none',\n      level: '전체 공개'\n    };\n\n    this.openShowLevel = () => {\n      this.setState({\n        showLevelDisplay: 'block'\n      });\n    };\n\n    this.closeShowLevel = () => {\n      this.setState({\n        showLevelDisplay: 'none'\n      });\n    };\n\n    this.handleImageChange = e => {\n      e.preventDefault();\n      const PostActions = this.props.PostActions;\n      let reader = new FileReader();\n      let file = e.target.files[0];\n\n      reader.onloadend = () => {\n        PostActions.setImage({\n          'url': reader.result\n        });\n        PostActions.updateFilelist(file);\n      };\n\n      try {\n        reader.readAsDataURL(file);\n      } catch (e) {\n        this.setPopupMessage('파일 등록에 실패했습니다. 다시 시도해주세요.');\n      }\n    };\n\n    this.handleWriteBox = e => {\n      const PostActions = this.props.PostActions;\n      const innerText = e.target.innerText;\n      PostActions.setWrittenData(innerText);\n    };\n\n    this.handleScroll = e => {\n      const scrollTop = e.srcElement.scrollingElement.scrollTop;\n      this.setState({\n        opacity: 0.8 - scrollTop / 800\n      });\n\n      if (this.state.opacity < 0) {\n        this.closeWriteModal();\n        this.props.PostActions.setPopupDisplay('none');\n        this.props.PostActions.setPostPopupDisplay('none');\n      }\n    };\n\n    this.openModal = () => {\n      const _this$props = this.props,\n            SearchActions = _this$props.SearchActions,\n            PostActions = _this$props.PostActions;\n      PostActions.setDisplay('block');\n      SearchActions.setFriendList(this.props.friendData);\n    };\n\n    this.closeWriteModal = () => {\n      this.props.PostActions.setWriteDisplay('none');\n    };\n\n    this.handleWithBox = () => {\n      const PostActions = this.props.PostActions;\n      PostActions.setWithFriendDisplay('block');\n    };\n\n    this.handleImageCancel = e => {\n      const PostActions = this.props.PostActions;\n      const id = e.target.id;\n      PostActions.removeImage(id);\n    };\n\n    this.handleShowClick = () => {\n      const showLevelDisplay = this.state.showLevelDisplay;\n      if (showLevelDisplay === 'none') this.openShowLevel();else this.closeShowLevel();\n    };\n\n    this.handleLevelClick = e => {\n      const id = e.target.id;\n      const PostActions = this.props.PostActions;\n      PostActions.setShowLevel({\n        showLevel: id\n      });\n      if (id === 'public') this.setState({\n        level: '전체 공개'\n      });else if (id === 'private') this.setState({\n        level: '나만 보기'\n      });else this.setState({\n        level: '친구 공개'\n      });\n      this.closeShowLevel();\n    };\n\n    this.handleWriteClickButton = () => {\n      const PostActions = this.props.PostActions;\n      PostActions.setPostPopupDisplay('block');\n    };\n\n    this.handleCancel = () => {\n      const PostActions = this.props.PostActions;\n      PostActions.setPostPopupDisplay('none');\n    };\n\n    this.setPopupMessage = text => {\n      const PostActions = this.props.PostActions;\n      PostActions.setPostPopupDisplay('none');\n      PostActions.setPopupDisplay('block');\n      PostActions.setPopupText(text);\n    };\n\n    this.handleWriteClick = async () => {\n      const _this$props2 = this.props,\n            PostActions = _this$props2.PostActions,\n            content = _this$props2.content,\n            showLevel = _this$props2.showLevel,\n            friendInfo = _this$props2.friendInfo,\n            filelist = _this$props2.filelist;\n      const setPopupMessage = this.setPopupMessage;\n      var tags = friendInfo.toJS();\n\n      if (content.length > 1000) {\n        console.log('*');\n        setPopupMessage('글은 1000자 이하여야 합니다. 다시 입력해주세요.');\n        return;\n      }\n\n      if (filelist.size > 9) {\n        setPopupMessage('이미지는 9장까지 게시할 수 있습니다.');\n        return;\n      }\n\n      try {\n        await PostActions.uploadFeed({\n          content,\n          showLevel,\n          tags\n        });\n      } catch (e) {\n        if (e.response.status === 409) {\n          setPopupMessage('글은 1000자 이하여야 합니다. 다시 입력해주세요.');\n          return;\n        }\n      }\n\n      const postId = this.props.postId;\n\n      try {\n        await filelist.forEach((value, index, filelist) => {\n          var formdata = new FormData();\n          formdata.set('file', value.get('file'));\n          if (postId !== -1 && formdata.get('file') !== null) PostActions.uploadImage(formdata, postId);\n        });\n      } catch (e) {\n        await PostActions.deleteFeed(postId);\n        setPopupMessage('글을 게시하는 데 실패했습니다. 다시 시도해주세요.');\n        return;\n      }\n\n      PostActions.setDisplay('none');\n      PostActions.setWithFriendDisplay('none');\n      PostActions.setWithDisplay('none');\n      PostActions.setWriteDisplay('none');\n      PostActions.setWrittenData('');\n      document.getElementById('^^content').textContent = '';\n      PostActions.initializeFilelist();\n      PostActions.initializeImage();\n      PostActions.setPostPopupDisplay('none');\n      this.renewMain();\n    };\n\n    this.renewMain = () => setTimeout(async () => {\n      const _this$props3 = this.props,\n            postId = _this$props3.postId,\n            TimelineActions = _this$props3.TimelineActions;\n      await TimelineActions.getFeedInformationDetail(postId);\n      await TimelineActions.renewMainInformation();\n    }, 4000);\n\n    this.handlePhotoDelete = async e => {\n      const id = e.target.id;\n      const PostActions = this.props.PostActions;\n      await PostActions.deleteFile(id);\n    };\n\n    this.handlePopupOk = () => {\n      const PostActions = this.props.PostActions;\n      PostActions.setPopupDisplay('none');\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n    if (!storage.get('loggedInfo')) return;\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.renewMain);\n  }\n\n  render() {\n    if (!storage.get('loggedInfo')) {\n      return null;\n    }\n\n    const username = storage.get('loggedInfo').nickname;\n    const _this$props4 = this.props,\n          images = _this$props4.images,\n          writeDisplay = _this$props4.writeDisplay,\n          withdisplay = _this$props4.withdisplay,\n          withfriend = _this$props4.withfriend,\n          popupDisplay = _this$props4.popupDisplay,\n          postPopupDisplay = _this$props4.postPopupDisplay,\n          popupText = _this$props4.popupText;\n    const _this$state = this.state,\n          opacity = _this$state.opacity,\n          showLevelDisplay = _this$state.showLevelDisplay,\n          level = _this$state.level;\n    const handleImageChange = this.handleImageChange,\n          handleWriteBox = this.handleWriteBox,\n          openModal = this.openModal,\n          closeWriteModal = this.closeWriteModal,\n          handleWithBox = this.handleWithBox,\n          handleImageCancel = this.handleImageCancel,\n          handleLevelClick = this.handleLevelClick,\n          handleShowClick = this.handleShowClick,\n          handleWriteClick = this.handleWriteClick,\n          handlePhotoDelete = this.handlePhotoDelete,\n          handleWriteClickButton = this.handleWriteClickButton,\n          handleCancel = this.handleCancel,\n          handlePopupOk = this.handlePopupOk;\n    return React.createElement(WriteBox, {\n      withdisplay: withdisplay,\n      withclick: handleWithBox,\n      friend: withfriend,\n      username: username,\n      onclick: handleWriteBox,\n      opacity: opacity,\n      click: openModal,\n      display: writeDisplay,\n      close: closeWriteModal,\n      showClick: handleShowClick,\n      showLevel: level,\n      writeClick: handleWriteClickButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(ShowLevelMenu, {\n      showDisplay: showLevelDisplay,\n      onclick: handleLevelClick,\n      top: '59px',\n      left: '800px',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(ImageList, {\n      image: images,\n      cancel: handleImageCancel,\n      change: handleImageChange,\n      handlePhotoDelete: handlePhotoDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(Popup, {\n      text: popupText,\n      display: popupDisplay,\n      handlePopupOk: handlePopupOk,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(PostPopup, {\n      right: '30%',\n      opacity: opacity,\n      text: '게시하시겠습니까?',\n      fixedDisplay: 'block',\n      display: postPopupDisplay,\n      handleOk: handleWriteClick,\n      handleCancel: handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  images: state.post.get('image'),\n  withdisplay: state.post.get('withDisplay'),\n  withfriend: state.post.get('withFriend'),\n  isTruePost: state.post.get('isTruePost'),\n  writeDisplay: state.post.get('writeDisplay'),\n  friendData: state.friend.get('friend'),\n  content: state.post.get('writtenData'),\n  showLevel: state.post.get('showLevel'),\n  friendInfo: state.post.get('friendInfo'),\n  postId: state.post.get('postId'),\n  filelist: state.post.get('filelist'),\n  clear: state.post.get('clear'),\n  popupDisplay: state.post.get('popupDisplay'),\n  postPopupDisplay: state.post.get('postPopupDisplay'),\n  popupText: state.post.get('popupText')\n}), dispatch => ({\n  PostActions: bindActionCreators(postActions, dispatch),\n  SearchActions: bindActionCreators(searchActions, dispatch),\n  TimelineActions: bindActionCreators(timelineActions, dispatch)\n}))(WriteBoxContainer);","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/containers/Base/WriteBoxContainer.js"],"names":["List","Map","React","Component","connect","WriteBox","ImageList","PostPopup","Popup","bindActionCreators","postActions","searchActions","timelineActions","storage","ShowLevelMenu","WriteBoxContainer","state","opacity","showLevelDisplay","level","openShowLevel","setState","closeShowLevel","handleImageChange","e","preventDefault","PostActions","props","reader","FileReader","file","target","files","onloadend","setImage","result","updateFilelist","readAsDataURL","setPopupMessage","handleWriteBox","innerText","setWrittenData","handleScroll","scrollTop","srcElement","scrollingElement","closeWriteModal","setPopupDisplay","setPostPopupDisplay","openModal","SearchActions","setDisplay","setFriendList","friendData","setWriteDisplay","handleWithBox","setWithFriendDisplay","handleImageCancel","id","removeImage","handleShowClick","handleLevelClick","setShowLevel","showLevel","handleWriteClickButton","handleCancel","text","setPopupText","handleWriteClick","content","friendInfo","filelist","tags","toJS","length","console","log","size","uploadFeed","response","status","postId","forEach","value","index","formdata","FormData","set","get","uploadImage","deleteFeed","setWithDisplay","document","getElementById","textContent","initializeFilelist","initializeImage","renewMain","setTimeout","TimelineActions","getFeedInformationDetail","renewMainInformation","handlePhotoDelete","deleteFile","handlePopupOk","componentDidMount","window","addEventListener","componentWillUnmount","clearTimeout","render","username","nickname","images","writeDisplay","withdisplay","withfriend","popupDisplay","postPopupDisplay","popupText","post","isTruePost","friend","clear","dispatch"],"mappings":"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","sourcesContent":["import { List,Map} from 'immutable';\r\nimport React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {WriteBox,ImageList} from '../../components/Post';\r\nimport {PostPopup,Popup} from '../../components/Popup';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as postActions from '../../redux/modules/post';\r\nimport * as searchActions from '../../redux/modules/search';\r\nimport * as timelineActions from '../../redux/modules/timeline';\r\nimport storage from '../../lib/storage';\r\nimport ShowLevelMenu from '../../components/Post/ShowLevelMenu';\r\n\r\nclass WriteBoxContainer extends Component{\r\n    state  = {\r\n        \r\n        opacity : 0.8,\r\n        showLevelDisplay : 'none',\r\n        level : '전체 공개'\r\n    };\r\n\r\n    openShowLevel = () => {\r\n        this.setState({\r\n            showLevelDisplay : 'block'\r\n        })\r\n    }\r\n    closeShowLevel = () => {\r\n        this.setState({\r\n            showLevelDisplay : 'none'\r\n        })\r\n    }\r\n\r\n    handleImageChange = (e) => {\r\n        e.preventDefault();\r\n        const {PostActions} = this.props;\r\n        let reader = new FileReader();\r\n        let file = e.target.files[0];\r\n        reader.onloadend = () => {\r\n            PostActions.setImage({'url' : reader.result});\r\n            PostActions.updateFilelist(file);\r\n        }\r\n        try{\r\n        reader.readAsDataURL(file);\r\n        }catch(e){\r\n            this.setPopupMessage('파일 등록에 실패했습니다. 다시 시도해주세요.');\r\n        }\r\n      }\r\n\r\n      handleWriteBox = (e) => {\r\n        const {PostActions} = this.props;\r\n        const {innerText} = e.target;\r\n        PostActions.setWrittenData(innerText);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n        if(!storage.get('loggedInfo')) return ;\r\n      }\r\n      handleScroll = (e) => {\r\n        const scrollTop =e.srcElement.scrollingElement.scrollTop;\r\n        \r\n        this.setState({\r\n            opacity : 0.8 - scrollTop / 800\r\n        });\r\n        if(this.state.opacity < 0){\r\n           this.closeWriteModal();\r\n           this.props.PostActions.setPopupDisplay('none');\r\n           this.props.PostActions.setPostPopupDisplay('none');\r\n        }\r\n      }\r\n    \r\n    openModal = () => {\r\n        const{SearchActions,PostActions} = this.props;\r\n        PostActions.setDisplay('block');\r\n        SearchActions.setFriendList(this.props.friendData);\r\n      }\r\n\r\n      closeWriteModal = () => {\r\n        this.props.PostActions.setWriteDisplay('none');\r\n      }\r\n\r\n      handleWithBox = () => {\r\n        const{PostActions} = this.props;\r\n        PostActions.setWithFriendDisplay('block');\r\n    }\r\n\r\n    handleImageCancel = (e) => {\r\n        const{PostActions} = this.props;\r\n        const {id} = e.target;\r\n        PostActions.removeImage(id);\r\n    }\r\n\r\n    handleShowClick = () => {\r\n        const {showLevelDisplay} = this.state;\r\n        if(showLevelDisplay === 'none')this.openShowLevel();\r\n        else this.closeShowLevel();\r\n    }\r\n\r\n    handleLevelClick = (e) => {\r\n        const {id} = e.target;\r\n        const {PostActions} = this.props;\r\n        PostActions.setShowLevel({showLevel : id});\r\n        if(id === 'public') this.setState({\r\n            level : '전체 공개'\r\n        });\r\n        else if(id === 'private') this.setState({\r\n            level : '나만 보기'\r\n        });\r\n        else this.setState({\r\n            level : '친구 공개'\r\n        })\r\n        this.closeShowLevel();\r\n    }\r\n\r\n    handleWriteClickButton = () => {\r\n        const {PostActions} = this.props;\r\n        PostActions.setPostPopupDisplay('block');\r\n    }\r\n    handleCancel = () => {\r\n        const {PostActions} = this.props;\r\n        PostActions.setPostPopupDisplay('none');\r\n    }\r\n    setPopupMessage = (text) => {\r\n        const {PostActions} = this.props;\r\n        PostActions.setPostPopupDisplay('none');\r\n        PostActions.setPopupDisplay('block');\r\n        PostActions.setPopupText(text);\r\n    }\r\n    handleWriteClick = async() => {\r\n        const {PostActions,content,showLevel,friendInfo,filelist} = this.props;\r\n        const {setPopupMessage} = this;\r\n        var tags = friendInfo.toJS();\r\n        if(content.length > 1000){\r\n            console.log('*');\r\n            setPopupMessage('글은 1000자 이하여야 합니다. 다시 입력해주세요.');\r\n            return;\r\n        }\r\n        if(filelist.size > 9){\r\n            setPopupMessage('이미지는 9장까지 게시할 수 있습니다.');\r\n            return;\r\n        }\r\n        try{\r\n        await PostActions.uploadFeed({content,showLevel,tags});\r\n        }catch(e){\r\n            if(e.response.status === 409){\r\n                setPopupMessage('글은 1000자 이하여야 합니다. 다시 입력해주세요.');\r\n                return;\r\n            }\r\n        }\r\n        const {postId} = this.props;\r\n        try{\r\n        await filelist.forEach((value,index,filelist)=>{\r\n                var formdata = new FormData();\r\n                formdata.set('file',value.get('file'));\r\n                if(postId !== -1 && formdata.get('file') !== null)\r\n                    PostActions.uploadImage(formdata,postId);\r\n        });\r\n    }catch(e){\r\n        await PostActions.deleteFeed(postId);\r\n        setPopupMessage('글을 게시하는 데 실패했습니다. 다시 시도해주세요.');\r\n        return;\r\n        }\r\n        PostActions.setDisplay('none');\r\n        PostActions.setWithFriendDisplay('none');\r\n        PostActions.setWithDisplay('none');\r\n        PostActions.setWriteDisplay('none');\r\n        PostActions.setWrittenData('');\r\n        document.getElementById('^^content').textContent = '';\r\n        PostActions.initializeFilelist();\r\n        PostActions.initializeImage();\r\n        PostActions.setPostPopupDisplay('none');\r\n        this.renewMain();\r\n    }\r\n   \r\n    renewMain=()=>\r\n    setTimeout(async()=>{\r\n        const {postId,TimelineActions} = this.props;\r\n        await TimelineActions.getFeedInformationDetail(postId);\r\n        await TimelineActions.renewMainInformation();\r\n    },4000);\r\n    handlePhotoDelete = async(e) =>{\r\n        const {id} = e.target;\r\n        const {PostActions} = this.props;\r\n        await PostActions.deleteFile(id);\r\n    }\r\n    handlePopupOk=()=>{\r\n        const {PostActions} = this.props;\r\n        PostActions.setPopupDisplay('none');\r\n    }\r\n   componentWillUnmount(){\r\n    clearTimeout(this.renewMain);\r\n   }\r\n    render(){\r\n        if(!storage.get('loggedInfo')) {\r\n            \r\n            return null;\r\n        }\r\n        const username = storage.get('loggedInfo').nickname;\r\n        const {images,writeDisplay,withdisplay,withfriend,popupDisplay,postPopupDisplay,popupText} = this.props;\r\n        const {opacity,showLevelDisplay,level} = this.state;\r\n        const {handleImageChange,handleWriteBox,openModal,closeWriteModal,handleWithBox,\r\n            handleImageCancel,handleLevelClick,handleShowClick,handleWriteClick,handlePhotoDelete,\r\n            handleWriteClickButton,handleCancel,handlePopupOk} = this;\r\n        return(\r\n            <WriteBox withdisplay = {withdisplay}  withclick = {handleWithBox} friend = {withfriend} username = {username} \r\n            onclick = {handleWriteBox} opacity = {opacity} click={openModal} display = {writeDisplay} \r\n            close = {closeWriteModal} showClick = {handleShowClick} showLevel={level} writeClick={handleWriteClickButton} >\r\n                <ShowLevelMenu showDisplay = {showLevelDisplay} onclick = {handleLevelClick} top = {'59px'} left = {'800px'}/>\r\n                <ImageList image = {images} cancel = {handleImageCancel} change = {handleImageChange} handlePhotoDelete = {handlePhotoDelete}/>\r\n                <Popup text={popupText} display = {popupDisplay} handlePopupOk={handlePopupOk}/>\r\n                <PostPopup right={'30%'} opacity={opacity} text={'게시하시겠습니까?'} fixedDisplay = {'block'} display = {postPopupDisplay} handleOk={handleWriteClick} handleCancel={handleCancel}/>\r\n                </WriteBox>\r\n        );\r\n    }\r\n\r\n}\r\nexport default connect(\r\n    (state) => ({\r\n        images : state.post.get('image'),\r\n        withdisplay : state.post.get('withDisplay'),\r\n        withfriend : state.post.get('withFriend'),\r\n        isTruePost : state.post.get('isTruePost'),\r\n        writeDisplay : state.post.get('writeDisplay'),\r\n        friendData : state.friend.get('friend'),\r\n        content : state.post.get('writtenData'),\r\n        showLevel : state.post.get('showLevel'),\r\n        friendInfo : state.post.get('friendInfo'),\r\n        postId : state.post.get('postId'),\r\n        filelist : state.post.get('filelist'),\r\n        clear : state.post.get('clear'),\r\n        popupDisplay : state.post.get('popupDisplay'),\r\n        postPopupDisplay : state.post.get('postPopupDisplay'),\r\n        popupText : state.post.get('popupText')\r\n    }),\r\n    (dispatch) => ({\r\n        PostActions: bindActionCreators(postActions, dispatch),\r\n        SearchActions : bindActionCreators(searchActions,dispatch),\r\n        TimelineActions : bindActionCreators(timelineActions,dispatch)\r\n\r\n    })\r\n)(WriteBoxContainer);"]},"metadata":{},"sourceType":"module"}