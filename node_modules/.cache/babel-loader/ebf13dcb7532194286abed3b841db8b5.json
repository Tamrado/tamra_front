{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\fronttimeline\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { Map, List, fromJS } from 'immutable';\nimport { handleActions, createAction } from 'redux-actions';\nimport { pender } from 'redux-pender';\nimport * as CommentAPI from '../../lib/api/comment';\nconst SHOW_POST_COMMENT_LIST = 'comment/SHOW_POST_COMMENT_LIST';\nconst WRITE_COMMENT = 'comment/WRITE_COMMENT';\nconst MODIFY_COMMENT = 'comment/MODIFY_COMMENT';\nconst DELETE_COMMENT = 'comment/DELETE_COMMENT';\nconst GET_COMMENT_NUM = 'comment/GET_COMMENT_NUM';\nexport const getCommentNum = createAction(GET_COMMENT_NUM, CommentAPI.getCommentNum);\nexport const showPostCommentList = createAction(SHOW_POST_COMMENT_LIST, CommentAPI.showPostCommentList);\nexport const writeComment = createAction(WRITE_COMMENT, CommentAPI.writeComment);\nexport const modifyComment = createAction(MODIFY_COMMENT, CommentAPI.modifyComment);\nexport const deleteComment = createAction(DELETE_COMMENT, CommentAPI.deleteComment);\nconst initialState = Map({\n  commentList: List(),\n  lastComment: true,\n  result: Map({}),\n  presentComment: Map({}),\n  commentNum: 0\n});\nexport default handleActions(_objectSpread({}, pender({\n  type: SHOW_POST_COMMENT_LIST,\n  onSuccess: (state, action) => state.set('commentList', fromJS(action.payload.data.contentlist)).set('lastComment', action.payload.data.last),\n  onFailure: (state, action) => state.set('commentList', List())\n}), {}, pender({\n  type: WRITE_COMMENT,\n  onSuccess: (state, action) => state.set('presentComment', fromJS(action.payload.data))\n}), {}, pender({\n  type: MODIFY_COMMENT,\n  onSuccess: (state, action) => state.set('result', action.payload)\n}), {}, pender({\n  type: DELETE_COMMENT,\n  onSuccess: (state, action) => state.set('result', action.payload)\n}), {}, pender({\n  type: GET_COMMENT_NUM,\n  onSuccess: (state, action) => state.set('commentNum', action.payload.data)\n})), initialState);","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/redux/modules/comment.js"],"names":["Map","List","fromJS","handleActions","createAction","pender","CommentAPI","SHOW_POST_COMMENT_LIST","WRITE_COMMENT","MODIFY_COMMENT","DELETE_COMMENT","GET_COMMENT_NUM","getCommentNum","showPostCommentList","writeComment","modifyComment","deleteComment","initialState","commentList","lastComment","result","presentComment","commentNum","type","onSuccess","state","action","set","payload","data","contentlist","last","onFailure"],"mappings":"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","sourcesContent":["import { Map,List,fromJS } from 'immutable';\r\nimport { handleActions, createAction } from 'redux-actions';\r\nimport {pender} from 'redux-pender';\r\nimport * as CommentAPI from '../../lib/api/comment';\r\n\r\nconst SHOW_POST_COMMENT_LIST = 'comment/SHOW_POST_COMMENT_LIST';\r\nconst WRITE_COMMENT = 'comment/WRITE_COMMENT';\r\nconst MODIFY_COMMENT = 'comment/MODIFY_COMMENT';\r\nconst DELETE_COMMENT = 'comment/DELETE_COMMENT';\r\nconst GET_COMMENT_NUM = 'comment/GET_COMMENT_NUM';\r\n\r\nexport const getCommentNum = createAction(GET_COMMENT_NUM,CommentAPI.getCommentNum);\r\nexport const showPostCommentList = createAction(SHOW_POST_COMMENT_LIST,CommentAPI.showPostCommentList);\r\nexport const writeComment = createAction(WRITE_COMMENT,CommentAPI.writeComment);\r\nexport const modifyComment = createAction(MODIFY_COMMENT,CommentAPI.modifyComment);\r\nexport const deleteComment = createAction(DELETE_COMMENT,CommentAPI.deleteComment);\r\n\r\nconst initialState = Map({\r\n    commentList : List(),\r\n    lastComment : true,\r\n    result : Map({}),\r\n    presentComment : Map({}),\r\n    commentNum : 0\r\n});\r\n\r\nexport default handleActions({\r\n    ...pender({\r\n        type : SHOW_POST_COMMENT_LIST,\r\n        onSuccess : (state,action) => state.set('commentList',fromJS(action.payload.data.contentlist)).set('lastComment',action.payload.data.last),\r\n        onFailure : (state,action) => state.set('commentList',List())\r\n        }),\r\n    ...pender({\r\n        type : WRITE_COMMENT,\r\n        onSuccess : (state,action) => state.set('presentComment',fromJS(action.payload.data))\r\n    }),\r\n    ...pender({\r\n        type : MODIFY_COMMENT,\r\n        onSuccess : (state,action) => state.set('result',action.payload)\r\n    }),\r\n    ...pender({\r\n        type: DELETE_COMMENT,\r\n        onSuccess : (state,action) => state.set('result',action.payload)\r\n    }),\r\n    ...pender({\r\n        type : GET_COMMENT_NUM,\r\n        onSuccess : (state,action) => state.set('commentNum',action.payload.data)\r\n    })\r\n},initialState);"]},"metadata":{},"sourceType":"module"}