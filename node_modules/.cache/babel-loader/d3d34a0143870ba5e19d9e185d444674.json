{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\fronttimeline\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport * as AuthAPI from '../../lib/api/auth';\nimport { pender } from 'redux-pender';\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO';\nconst SET_VALIDATED = 'user/SET_VALIDATED';\nconst LOGOUT = 'user/LOGOUT';\nconst CHECK_STATUS = 'user/CHECK_STATUS';\nconst KAKAO_CHECK_STATUS = 'user/KAKAO_CHECK_STATUS';\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO);\nexport const setValidated = createAction(SET_VALIDATED);\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\nexport const checkStatus = createAction(CHECK_STATUS, AuthAPI.checkStatus); // 현재 로그인상태 확인\n\nexport const kakaoCheckStatus = createAction(KAKAO_CHECK_STATUS, AuthAPI.kakaoCheckStatus);\nconst initialState = Map({\n  loggedInfo: Map({\n    // 현재 로그인 중인 유저의 정보\n    thumbnail: null,\n    username: null\n  }),\n  logged: false,\n  //현재 로그인중인지 알려줌\n  validated: false // 현재 로그인 중인지 아닌지 한번 서버측에 검증했음을 의미\n\n});\nexport default handleActions(_objectSpread({\n  [SET_LOGGED_INFO]: (state, action) => state.set('loggedInfo', Map(action.payload)).set('logged', true),\n  [SET_VALIDATED]: (state, action) => state.set('validated', action.payload)\n}, pender({\n  type: CHECK_STATUS,\n  onSuccess: (state, action) => state.set('loggedInfo', Map(action.payload.data)).set('validated', true),\n  onFailure: (state, action) => initialState\n}), {}, pender({\n  type: KAKAO_CHECK_STATUS,\n  onSuccess: (state, action) => state.set('loggedi')\n})), initialState);","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/redux/modules/user.js"],"names":["createAction","handleActions","Map","AuthAPI","pender","SET_LOGGED_INFO","SET_VALIDATED","LOGOUT","CHECK_STATUS","KAKAO_CHECK_STATUS","setLoggedInfo","setValidated","logout","checkStatus","kakaoCheckStatus","initialState","loggedInfo","thumbnail","username","logged","validated","state","action","set","payload","type","onSuccess","data","onFailure"],"mappings":";AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AAEA,SAAQC,GAAR,QAAkB,WAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,SAAQC,MAAR,QAAqB,cAArB;AAEA,MAAMC,eAAe,GAAG,sBAAxB;AACA,MAAMC,aAAa,GAAG,oBAAtB;AACA,MAAMC,MAAM,GAAG,aAAf;AACA,MAAMC,YAAY,GAAG,mBAArB;AACA,MAAMC,kBAAkB,GAAG,yBAA3B;AAEA,OAAO,MAAMC,aAAa,GAAGV,YAAY,CAACK,eAAD,CAAlC;AACP,OAAO,MAAMM,YAAY,GAAGX,YAAY,CAACM,aAAD,CAAjC;AACP,OAAO,MAAMM,MAAM,GAAGZ,YAAY,CAACO,MAAD,EAAQJ,OAAO,CAACS,MAAhB,CAA3B;AACP,OAAO,MAAMC,WAAW,GAAGb,YAAY,CAACQ,YAAD,EAAcL,OAAO,CAACU,WAAtB,CAAhC,C,CAAmE;;AAC1E,OAAO,MAAMC,gBAAgB,GAAGd,YAAY,CAACS,kBAAD,EAAoBN,OAAO,CAACW,gBAA5B,CAArC;AACP,MAAMC,YAAY,GAAGb,GAAG,CAAC;AACrBc,EAAAA,UAAU,EAAEd,GAAG,CAAC;AAAE;AACde,IAAAA,SAAS,EAAE,IADC;AAEZC,IAAAA,QAAQ,EAAE;AAFE,GAAD,CADM;AAKrBC,EAAAA,MAAM,EAAG,KALY;AAKL;AAChBC,EAAAA,SAAS,EAAE,KANU,CAMJ;;AANI,CAAD,CAAxB;AASA,eAAenB,aAAa;AACxB,GAACI,eAAD,GAAmB,CAACgB,KAAD,EAAOC,MAAP,KAAkBD,KAAK,CAACE,GAAN,CAAU,YAAV,EAAuBrB,GAAG,CAACoB,MAAM,CAACE,OAAR,CAA1B,EAA4CD,GAA5C,CAAgD,QAAhD,EAAyD,IAAzD,CADb;AAExB,GAACjB,aAAD,GAAkB,CAACe,KAAD,EAAOC,MAAP,KAAkBD,KAAK,CAACE,GAAN,CAAU,WAAV,EAAuBD,MAAM,CAACE,OAA9B;AAFZ,GAGrBpB,MAAM,CAAC;AACNqB,EAAAA,IAAI,EAAEjB,YADA;AAENkB,EAAAA,SAAS,EAAE,CAACL,KAAD,EAAOC,MAAP,KAAkBD,KAAK,CAACE,GAAN,CAAU,YAAV,EAAuBrB,GAAG,CAACoB,MAAM,CAACE,OAAP,CAAeG,IAAhB,CAA1B,EAAiDJ,GAAjD,CAAqD,WAArD,EAAkE,IAAlE,CAFvB;AAGNK,EAAAA,SAAS,EAAE,CAACP,KAAD,EAAOC,MAAP,KAAkBP;AAHvB,CAAD,CAHe,MAQrBX,MAAM,CAAC;AACNqB,EAAAA,IAAI,EAAEhB,kBADA;AAENiB,EAAAA,SAAS,EAAE,CAACL,KAAD,EAAOC,MAAP,KAAkBD,KAAK,CAACE,GAAN,CAAU,SAAV;AAFvB,CAAD,CARe,GAazBR,YAbyB,CAA5B","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\r\n\r\nimport {Map} from 'immutable';\r\nimport * as AuthAPI from '../../lib/api/auth';\r\nimport {pender} from 'redux-pender';\r\n\r\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO';\r\nconst SET_VALIDATED = 'user/SET_VALIDATED';\r\nconst LOGOUT = 'user/LOGOUT';\r\nconst CHECK_STATUS = 'user/CHECK_STATUS';\r\nconst KAKAO_CHECK_STATUS = 'user/KAKAO_CHECK_STATUS';\r\n\r\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO);\r\nexport const setValidated = createAction(SET_VALIDATED);\r\nexport const logout = createAction(LOGOUT,AuthAPI.logout);\r\nexport const checkStatus = createAction(CHECK_STATUS,AuthAPI.checkStatus);// 현재 로그인상태 확인\r\nexport const kakaoCheckStatus = createAction(KAKAO_CHECK_STATUS,AuthAPI.kakaoCheckStatus);\r\nconst initialState = Map({\r\n    loggedInfo: Map({ // 현재 로그인 중인 유저의 정보\r\n        thumbnail: null, \r\n        username: null\r\n    }),\r\n    logged : false, //현재 로그인중인지 알려줌\r\n    validated: false // 현재 로그인 중인지 아닌지 한번 서버측에 검증했음을 의미\r\n});\r\n\r\nexport default handleActions({\r\n    [SET_LOGGED_INFO]: (state,action) => state.set('loggedInfo',Map(action.payload)).set('logged',true),\r\n    [SET_VALIDATED] : (state,action) => state.set('validated', action.payload),\r\n    ...pender({\r\n        type: CHECK_STATUS,\r\n        onSuccess: (state,action) => state.set('loggedInfo',Map(action.payload.data)).set('validated', true),\r\n        onFailure: (state,action) => initialState\r\n    }),\r\n    ...pender({\r\n        type: KAKAO_CHECK_STATUS,\r\n        onSuccess: (state,action) => state.set('loggedi')\r\n    })\r\n\r\n}, initialState);"]},"metadata":{},"sourceType":"module"}