{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\user\\\\fronttimeline\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\user\\\\fronttimeline\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _objectSpread2;import{createAction,handleActions}from'redux-actions';import{Map}from'immutable';import*as AuthAPI from'../../lib/api/auth';import{pender}from'redux-pender';var SET_LOGGED_INFO='user/SET_LOGGED_INFO';var SET_VALIDATED='user/SET_VALIDATED';var LOGOUT='user/LOGOUT';var CHECK_STATUS='user/CHECK_STATUS';var KAKAO_CHECK_STATUS='user/KAKAO_CHECK_STATUS';export var setLoggedInfo=createAction(SET_LOGGED_INFO);export var setValidated=createAction(SET_VALIDATED);export var logout=createAction(LOGOUT,AuthAPI.logout);export var checkStatus=createAction(CHECK_STATUS,AuthAPI.checkStatus);// 현재 로그인상태 확인\nexport var kakaoCheckStatus=createAction(KAKAO_CHECK_STATUS,AuthAPI.kakaoCheckStatus);var initialState=Map({loggedInfo:Map({// 현재 로그인 중인 유저의 정보\nthumbnail:null,username:null}),logged:false,//현재 로그인중인지 알려줌\nvalidated:false// 현재 로그인 중인지 아닌지 한번 서버측에 검증했음을 의미\n});export default handleActions(_objectSpread((_objectSpread2={},_defineProperty(_objectSpread2,SET_LOGGED_INFO,function(state,action){return state.set('loggedInfo',Map(action.payload)).set('logged',true);}),_defineProperty(_objectSpread2,SET_VALIDATED,function(state,action){return state.set('validated',action.payload);}),_objectSpread2),pender({type:CHECK_STATUS,onSuccess:function onSuccess(state,action){return state.set('loggedInfo',Map(action.payload.data)).set('validated',true);},onFailure:function onFailure(state,action){return initialState;}}),{},pender({type:KAKAO_CHECK_STATUS,onSuccess:function onSuccess(state,action){return state.set('validated',true);},onFailure:function onFailure(state,action){return initialState;}})),initialState);","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/redux/modules/user.js"],"names":["createAction","handleActions","Map","AuthAPI","pender","SET_LOGGED_INFO","SET_VALIDATED","LOGOUT","CHECK_STATUS","KAKAO_CHECK_STATUS","setLoggedInfo","setValidated","logout","checkStatus","kakaoCheckStatus","initialState","loggedInfo","thumbnail","username","logged","validated","state","action","set","payload","type","onSuccess","data","onFailure"],"mappings":"wUAAA,OAAQA,YAAR,CAAsBC,aAAtB,KAA0C,eAA1C,CAEA,OAAQC,GAAR,KAAkB,WAAlB,CACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,oBAAzB,CACA,OAAQC,MAAR,KAAqB,cAArB,CAEA,GAAMC,CAAAA,eAAe,CAAG,sBAAxB,CACA,GAAMC,CAAAA,aAAa,CAAG,oBAAtB,CACA,GAAMC,CAAAA,MAAM,CAAG,aAAf,CACA,GAAMC,CAAAA,YAAY,CAAG,mBAArB,CACA,GAAMC,CAAAA,kBAAkB,CAAG,yBAA3B,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAGV,YAAY,CAACK,eAAD,CAAlC,CACP,MAAO,IAAMM,CAAAA,YAAY,CAAGX,YAAY,CAACM,aAAD,CAAjC,CACP,MAAO,IAAMM,CAAAA,MAAM,CAAGZ,YAAY,CAACO,MAAD,CAAQJ,OAAO,CAACS,MAAhB,CAA3B,CACP,MAAO,IAAMC,CAAAA,WAAW,CAAGb,YAAY,CAACQ,YAAD,CAAcL,OAAO,CAACU,WAAtB,CAAhC,CAAmE;AAC1E,MAAO,IAAMC,CAAAA,gBAAgB,CAAGd,YAAY,CAACS,kBAAD,CAAoBN,OAAO,CAACW,gBAA5B,CAArC,CACP,GAAMC,CAAAA,YAAY,CAAGb,GAAG,CAAC,CACrBc,UAAU,CAAEd,GAAG,CAAC,CAAE;AACde,SAAS,CAAE,IADC,CAEZC,QAAQ,CAAE,IAFE,CAAD,CADM,CAKrBC,MAAM,CAAG,KALY,CAKL;AAChBC,SAAS,CAAE,KAAM;AANI,CAAD,CAAxB,CASA,cAAenB,CAAAA,aAAa,iEACvBI,eADuB,CACL,SAACgB,KAAD,CAAOC,MAAP,QAAkBD,CAAAA,KAAK,CAACE,GAAN,CAAU,YAAV,CAAuBrB,GAAG,CAACoB,MAAM,CAACE,OAAR,CAA1B,EAA4CD,GAA5C,CAAgD,QAAhD,CAAyD,IAAzD,CAAlB,EADK,iCAEvBjB,aAFuB,CAEN,SAACe,KAAD,CAAOC,MAAP,QAAkBD,CAAAA,KAAK,CAACE,GAAN,CAAU,WAAV,CAAuBD,MAAM,CAACE,OAA9B,CAAlB,EAFM,kBAGrBpB,MAAM,CAAC,CACNqB,IAAI,CAAEjB,YADA,CAENkB,SAAS,CAAE,mBAACL,KAAD,CAAOC,MAAP,QAAkBD,CAAAA,KAAK,CAACE,GAAN,CAAU,YAAV,CAAuBrB,GAAG,CAACoB,MAAM,CAACE,OAAP,CAAeG,IAAhB,CAA1B,EAAiDJ,GAAjD,CAAqD,WAArD,CAAkE,IAAlE,CAAlB,EAFL,CAGNK,SAAS,CAAE,mBAACP,KAAD,CAAOC,MAAP,QAAkBP,CAAAA,YAAlB,EAHL,CAAD,CAHe,IAQrBX,MAAM,CAAC,CACNqB,IAAI,CAAEhB,kBADA,CAENiB,SAAS,CAAE,mBAACL,KAAD,CAAOC,MAAP,QAAkBD,CAAAA,KAAK,CAACE,GAAN,CAAU,WAAV,CAAsB,IAAtB,CAAlB,EAFL,CAGNK,SAAS,CAAE,mBAACP,KAAD,CAAOC,MAAP,QAAkBP,CAAAA,YAAlB,EAHL,CAAD,CARe,EAczBA,YAdyB,CAA5B","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\r\n\r\nimport {Map} from 'immutable';\r\nimport * as AuthAPI from '../../lib/api/auth';\r\nimport {pender} from 'redux-pender';\r\n\r\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO';\r\nconst SET_VALIDATED = 'user/SET_VALIDATED';\r\nconst LOGOUT = 'user/LOGOUT';\r\nconst CHECK_STATUS = 'user/CHECK_STATUS';\r\nconst KAKAO_CHECK_STATUS = 'user/KAKAO_CHECK_STATUS';\r\n\r\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO);\r\nexport const setValidated = createAction(SET_VALIDATED);\r\nexport const logout = createAction(LOGOUT,AuthAPI.logout);\r\nexport const checkStatus = createAction(CHECK_STATUS,AuthAPI.checkStatus);// 현재 로그인상태 확인\r\nexport const kakaoCheckStatus = createAction(KAKAO_CHECK_STATUS,AuthAPI.kakaoCheckStatus);\r\nconst initialState = Map({\r\n    loggedInfo: Map({ // 현재 로그인 중인 유저의 정보\r\n        thumbnail: null, \r\n        username: null\r\n    }),\r\n    logged : false, //현재 로그인중인지 알려줌\r\n    validated: false // 현재 로그인 중인지 아닌지 한번 서버측에 검증했음을 의미\r\n});\r\n\r\nexport default handleActions({\r\n    [SET_LOGGED_INFO]: (state,action) => state.set('loggedInfo',Map(action.payload)).set('logged',true),\r\n    [SET_VALIDATED] : (state,action) => state.set('validated', action.payload),\r\n    ...pender({\r\n        type: CHECK_STATUS,\r\n        onSuccess: (state,action) => state.set('loggedInfo',Map(action.payload.data)).set('validated', true),\r\n        onFailure: (state,action) => initialState\r\n    }),\r\n    ...pender({\r\n        type: KAKAO_CHECK_STATUS,\r\n        onSuccess: (state,action) => state.set('validated',true),\r\n        onFailure: (state,action) => initialState\r\n    })\r\n\r\n}, initialState);"]},"metadata":{},"sourceType":"module"}