{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\fronttimeline\\\\src\\\\containers\\\\Base\\\\PostDetailContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport storage from '../../lib/storage';\nimport * as timelineActions from '../../redux/modules/timeline';\nimport * as commentActions from '../../redux/modules/comment';\nimport * as postActions from '../../redux/modules/post';\nimport * as likeActions from '../../redux/modules/like';\nimport { CommentList, DetailPostView } from '../../components/DetailPost';\n\nclass PostDetailContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pageCount: 0\n    };\n\n    this.componentDidMount = async () => {\n      await this.renderPageInfo();\n      await this.renderCommentInfo();\n    };\n\n    this.dateTimeToFormatted = dt => {\n      const min = 60 * 1000;\n      const c = new Date();\n      var d = new Date(dt);\n      var minsAgo = Math.floor((c - d) / min);\n      var result = {\n        'raw': d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? '' : '0') + (d.getMonth() + 1) + '-' + (d.getDate() > 9 ? '' : '0') + d.getDate() + ' ' + (d.getHours() > 9 ? '' : '0') + d.getHours() + ':' + (d.getMinutes() > 9 ? '' : '0') + d.getMinutes() + ':' + (d.getSeconds() > 9 ? '' : '0') + d.getSeconds(),\n        'month': d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? '' : '0') + (d.getMonth() + 1) + '-' + (d.getDate() > 9 ? '' : '0') + d.getDate(),\n        'formatted': ''\n      };\n\n      if (minsAgo < 60) {\n        // 1시간 내\n        result.formatted = minsAgo + '분 전';\n      } else if (minsAgo < 60 * 24) {\n        // 하루 내\n        result.formatted = Math.floor(minsAgo / 60) + '시간 전';\n      } else if (minsAgo < 60 * 24 * 30) {\n        // 하루 이상\n        result.formatted = Math.floor(minsAgo / 60 / 24) + '일 전';\n      } else {\n        result.formatted = result.month;\n      }\n\n      return result.formatted;\n    };\n\n    this.setImageSize = async index => {\n      const _this$props = this.props,\n            presentPost = _this$props.presentPost,\n            PostActions = _this$props.PostActions;\n      let imageSize = await this.getImageSize(presentPost.getIn(['feed', 'files', index, 'original']));\n      await PostActions.setFileSize(imageSize);\n    };\n\n    this.renderPageInfo = async () => {\n      const _this$props2 = this.props,\n            postid = _this$props2.postid,\n            TimelineActions = _this$props2.TimelineActions,\n            PostActions = _this$props2.PostActions,\n            imageIndex = _this$props2.imageIndex;\n      let index = imageIndex.substr(1);\n      const id = postid.substr(1);\n      await TimelineActions.getFeedInformationDetail(id);\n      await this.setPostTime();\n      const presentPost = this.props.presentPost;\n      await this.setImageSize(index);\n      if (presentPost.getIn(['feed', 'files']) > 1) TimelineActions.setImageArrowVisible('block');\n    };\n\n    this.getImageSize = url => {\n      return new Promise((resolve, reject) => {\n        let image = new Image();\n\n        image.onload = () => {\n          resolve({\n            width: image.naturalWidth,\n            height: image.naturalHeight\n          });\n        };\n\n        image.src = url;\n      });\n    };\n\n    this.renderCommentInfo = async () => {\n      const _this$props3 = this.props,\n            CommentActions = _this$props3.CommentActions,\n            TimelineActions = _this$props3.TimelineActions,\n            presentPost = _this$props3.presentPost,\n            postid = _this$props3.postid;\n      const id = postid.substr(1);\n      let page = presentPost.getIn(['feed', 'commentPage']);\n      await CommentActions.showPostCommentList(id, page);\n      await TimelineActions.setDetailCommentPage(id);\n      const _this$props4 = this.props,\n            comments = _this$props4.comments,\n            lastComment = _this$props4.lastComment;\n      if (lastComment) await TimelineActions.setDetailCommentList({\n        'commentId': id,\n        'commentList': comments,\n        'trueComment': false\n      });else await TimelineActions.setDetailCommentList({\n        'commentId': id,\n        'commentList': comments,\n        'trueComment': true\n      });\n      await this.setCommentTime();\n    };\n\n    this.setPostTime = async () => {\n      const _this$props5 = this.props,\n            presentPost = _this$props5.presentPost,\n            TimelineActions = _this$props5.TimelineActions;\n      let time = presentPost.getIn(['feed', 'timestamp']);\n      let timestring = this.dateTimeToFormatted(time);\n      await TimelineActions.setDetailTime(timestring);\n    };\n\n    this.setCommentTime = async () => {\n      const _this$props6 = this.props,\n            presentPost = _this$props6.presentPost,\n            TimelineActions = _this$props6.TimelineActions,\n            commentList = _this$props6.commentList;\n      const comments = commentList;\n      await Promise.all(comments.map(async (comment, commentIndex) => {\n        let time = comment.timestamp;\n        let timestring = this.dateTimeToFormatted(time);\n        await TimelineActions.setDetailCommentTime({\n          timestring: timestring,\n          commentIndex: commentIndex\n        });\n      }));\n    };\n\n    this.handleLeft = async () => {\n      const _this$props7 = this.props,\n            presentPost = _this$props7.presentPost,\n            imageIndex = _this$props7.imageIndex,\n            history = _this$props7.history,\n            postid = _this$props7.postid,\n            PostActions = _this$props7.PostActions;\n      let index = imageIndex.substr(1);\n      let imageSize = presentPost.getIn(['feed', 'files']).size;\n      this.setState({\n        pageCount: this.state.pageCount + 1\n      });\n\n      if (parseInt(index) === 0) {\n        await this.setImageSize(imageSize - 1);\n        history.push(`/feed/@${postid}/image/:${imageSize - 1}`);\n      } else {\n        await this.setImageSize(parseInt(index) - 1);\n        history.push(`/feed/@${postid}/image/:${parseInt(index) - 1}`);\n      }\n    };\n\n    this.handleRight = async () => {\n      const _this$props8 = this.props,\n            presentPost = _this$props8.presentPost,\n            imageIndex = _this$props8.imageIndex,\n            history = _this$props8.history,\n            postid = _this$props8.postid,\n            PostActions = _this$props8.PostActions;\n      let index = imageIndex.substr(1);\n      let size = await this.getImageSize(presentPost.getIn(['feed', 'files', index, 'original']));\n      PostActions.setFileSize(size);\n      this.setState({\n        pageCount: this.state.pageCount + 1\n      });\n      let imageSize = presentPost.getIn(['feed', 'files']).size;\n\n      if (parseInt(index) === imageSize - 1) {\n        await this.setImageSize(0);\n        history.push(`/feed/@${postid}/image/:0`);\n      } else {\n        await this.setImageSize(parseInt(index) + 1);\n        history.push(`/feed/@${postid}/image/:${parseInt(index) + 1}`);\n      }\n    };\n\n    this.handleCommentAdd = async () => {\n      const _this$props9 = this.props,\n            TimelineActions = _this$props9.TimelineActions,\n            CommentActions = _this$props9.CommentActions,\n            presentPost = _this$props9.presentPost,\n            postid = _this$props9.postid;\n      const id = postid.substr(1);\n\n      if (presentPost.getIn(['feed', 'trueComment'])) {\n        const page = presentPost.getIn(['feed', 'commentPage']);\n\n        try {\n          await CommentActions.showPostCommentList(id, page);\n          await TimelineActions.setDetailCommentPage(id);\n          const _this$props10 = this.props,\n                comments = _this$props10.comments,\n                lastComment = _this$props10.lastComment;\n          if (lastComment) await TimelineActions.setDetailCommentList({\n            'commentId': id,\n            'commentList': comments,\n            'trueComment': false\n          });else await TimelineActions.setDetailCommentList({\n            'commentId': id,\n            'commentList': comments,\n            'trueComment': true\n          });\n          await this.setCommentTime(id);\n        } catch (e) {\n          TimelineActions.setCommentFalse(id);\n        }\n      }\n    };\n\n    this.enterComment = async e => {\n      if (window.event.keyCode === 13) {\n        const _this$props11 = this.props,\n              CommentActions = _this$props11.CommentActions,\n              TimelineActions = _this$props11.TimelineActions,\n              postid = _this$props11.postid;\n        const innerText = e.target.innerText;\n        const id = postid.substr(1);\n        var content = innerText;\n        content = content.replace(/\\r/g, \"\");\n        content = content.replace(/\\n/g, \"\");\n        await CommentActions.writeComment({\n          id,\n          content\n        });\n        await CommentActions.showPostCommentList(id, 1);\n        this.renewComment(id);\n\n        for (var i = 0; i < document.getElementsByName('^^comment').length; i++) {\n          console.log(document.getElementsByName('^^comment')[i].id);\n\n          if (parseInt(document.getElementsByName('^^comment')[i].id) === parseInt(id)) {\n            document.getElementsByName('^^comment')[i].textContent = '';\n            document.getElementsByName('^^comment')[i].blur();\n          }\n        }\n\n        await CommentActions.getCommentNum(id);\n        var commentNum = this.props.commentNum;\n        await TimelineActions.setCommentNum({\n          'commentNum': commentNum,\n          'commentId': id\n        });\n        await this.setCommentTime(id);\n      }\n    };\n\n    this.renewComment = id => setTimeout(async () => {\n      const _this$props12 = this.props,\n            presentComment = _this$props12.presentComment,\n            TimelineActions = _this$props12.TimelineActions;\n      await TimelineActions.renewDetailComment({\n        'commentId': id,\n        'presentComment': presentComment\n      });\n      await this.setCommentTime(id);\n    }, 2000);\n\n    this.handleLikeClick = async e => {\n      const _this$props13 = this.props,\n            LikeActions = _this$props13.LikeActions,\n            TimelineActions = _this$props13.TimelineActions;\n      const id = e.target.id;\n      await TimelineActions.setLikeKey(id);\n      await LikeActions.clickLike(id);\n      await TimelineActions.setDetailLike('none');\n      await TimelineActions.setLike('none');\n\n      try {\n        await LikeActions.getLikeAndUserList(id, 1);\n      } catch (e) {}\n\n      const totalNum = this.props.totalNum;\n      await TimelineActions.setDetailLikeNum(totalNum);\n      await TimelineActions.setLikeNum(totalNum);\n    };\n\n    this.handleCancelClick = async e => {\n      const _this$props14 = this.props,\n            LikeActions = _this$props14.LikeActions,\n            TimelineActions = _this$props14.TimelineActions;\n      const id = e.target.id;\n      await TimelineActions.setLikeKey(id);\n      await LikeActions.cancelLike(id);\n      await TimelineActions.setDetailLike('block');\n      await TimelineActions.setLike('block');\n\n      try {\n        await LikeActions.getLikeAndUserList(id, 1);\n      } catch (e) {}\n\n      const totalNum = this.props.totalNum;\n      await TimelineActions.setDetailLikeNum(totalNum);\n      await TimelineActions.setLikeNum(totalNum);\n    };\n  }\n\n  render() {\n    if (!storage.get('loggedInfo')) {\n      return null;\n    }\n\n    const _storage$get = storage.get('loggedInfo'),\n          thumbnail = _storage$get.thumbnail,\n          username = _storage$get.username,\n          nickname = _storage$get.nickname;\n\n    const _this$props15 = this.props,\n          presentPost = _this$props15.presentPost,\n          commentList = _this$props15.commentList,\n          fileSize = _this$props15.fileSize,\n          imageIndex = _this$props15.imageIndex,\n          history = _this$props15.history,\n          trueComment = _this$props15.trueComment,\n          postid = _this$props15.postid;\n    const handleLeft = this.handleLeft,\n          handleRight = this.handleRight,\n          enterComment = this.enterComment,\n          handleCommentAdd = this.handleCommentAdd,\n          handleCancelClick = this.handleCancelClick,\n          handleLikeClick = this.handleLikeClick;\n    let index = imageIndex.substr(1);\n    let postId = postid.substr(1);\n    return React.createElement(DetailPostView, {\n      mainfeed: presentPost.toJS(),\n      fileSize: fileSize,\n      imageIndex: index,\n      history: history,\n      handleLeft: handleLeft,\n      handleRight: handleRight,\n      pageCount: this.state.pageCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(CommentList, {\n      comments: commentList,\n      commentThumbnail: thumbnail,\n      name: nickname,\n      userId: username,\n      enterComment: enterComment,\n      handleCommentAdd: handleCommentAdd,\n      trueComment: trueComment,\n      postId: postId,\n      mainfeed: presentPost.toJS(),\n      cancel: handleCancelClick,\n      like: handleLikeClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  presentPost: state.timeline.get('presentPost'),\n  lastComment: state.comment.get('lastComment'),\n  comments: state.comment.get('commentList'),\n  commentList: state.timeline.getIn(['presentPost', 'feed', 'commentList']),\n  fileSize: state.post.get('fileSize'),\n  commentNum: state.comment.get('commentNum'),\n  trueComment: state.timeline.getIn(['presentPost', 'feed', 'trueComment']),\n  totalNum: state.like.get('totalNum'),\n  presentComment: state.comment.get('presentComment')\n}), dispatch => ({\n  TimelineActions: bindActionCreators(timelineActions, dispatch),\n  CommentActions: bindActionCreators(commentActions, dispatch),\n  PostActions: bindActionCreators(postActions, dispatch),\n  LikeActions: bindActionCreators(likeActions, dispatch)\n}))(PostDetailContainer);","map":{"version":3,"sources":["C:/Users/user/fronttimeline/src/containers/Base/PostDetailContainer.js"],"names":["React","Component","connect","bindActionCreators","storage","timelineActions","commentActions","postActions","likeActions","CommentList","DetailPostView","PostDetailContainer","state","pageCount","componentDidMount","renderPageInfo","renderCommentInfo","dateTimeToFormatted","dt","min","c","Date","d","minsAgo","Math","floor","result","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","formatted","month","setImageSize","index","props","presentPost","PostActions","imageSize","getImageSize","getIn","setFileSize","postid","TimelineActions","imageIndex","substr","id","getFeedInformationDetail","setPostTime","setImageArrowVisible","url","Promise","resolve","reject","image","Image","onload","width","naturalWidth","height","naturalHeight","src","CommentActions","page","showPostCommentList","setDetailCommentPage","comments","lastComment","setDetailCommentList","setCommentTime","time","timestring","setDetailTime","commentList","all","map","comment","commentIndex","timestamp","setDetailCommentTime","handleLeft","history","size","setState","parseInt","push","handleRight","handleCommentAdd","e","setCommentFalse","enterComment","window","event","keyCode","innerText","target","content","replace","writeComment","renewComment","i","document","getElementsByName","length","console","log","textContent","blur","getCommentNum","commentNum","setCommentNum","setTimeout","presentComment","renewDetailComment","handleLikeClick","LikeActions","setLikeKey","clickLike","setDetailLike","setLike","getLikeAndUserList","totalNum","setDetailLikeNum","setLikeNum","handleCancelClick","cancelLike","render","get","thumbnail","username","nickname","fileSize","trueComment","postId","toJS","timeline","post","like","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport storage from '../../lib/storage';\r\nimport * as timelineActions from '../../redux/modules/timeline';\r\nimport * as commentActions from '../../redux/modules/comment';\r\nimport * as postActions from '../../redux/modules/post';\r\nimport * as likeActions from '../../redux/modules/like';\r\nimport {CommentList,DetailPostView} from '../../components/DetailPost';\r\nclass PostDetailContainer extends Component{\r\n    state = {\r\n        pageCount : 0\r\n    }\r\n    componentDidMount=async()=>{\r\n        await this.renderPageInfo();\r\n        await this.renderCommentInfo();\r\n    }\r\n    dateTimeToFormatted=(dt)=> {\r\n\t\tconst min = 60 * 1000;\r\n\t\tconst c = new Date();\r\n\t\tvar d = new Date(dt);\r\n\t\tvar minsAgo = Math.floor((c - d) / (min));\r\n\r\n\t\tvar result = {\r\n            'raw': d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? '' : '0') + (d.getMonth() + 1) \r\n            + '-' + (d.getDate() > 9 ? '' : '0') +  d.getDate() + ' ' + (d.getHours() > 9 ? '' : '0') \r\n            +  d.getHours() + ':' + (d.getMinutes() > 9 ? '' : '0') +  d.getMinutes() + ':'  \r\n            + (d.getSeconds() > 9 ? '' : '0') +  d.getSeconds(),\r\n            'month' : d.getFullYear() + '-' + (d.getMonth() + 1 > 9 ? '' : '0') + (d.getMonth() + 1) \r\n            + '-' + (d.getDate() > 9 ? '' : '0') +  d.getDate(),\r\n\t\t\t'formatted': ''\r\n\t\t};\r\n\r\n\t\tif (minsAgo < 60) { // 1시간 내\r\n\t\t\tresult.formatted = minsAgo + '분 전';\r\n\t\t} else if (minsAgo < 60 * 24) { // 하루 내\r\n\t\t\tresult.formatted = Math.floor(minsAgo / 60) + '시간 전';\r\n\t\t} else if(minsAgo < 60 * 24 * 30) { // 하루 이상\r\n\t\t\tresult.formatted = Math.floor(minsAgo / 60 / 24) + '일 전';\r\n\t\t} else{\r\n            result.formatted = result.month;\r\n        }\r\n\t\treturn result.formatted;\r\n    };\r\n    setImageSize=async(index)=>{\r\n        const{presentPost,PostActions} = this.props;\r\n        let imageSize = await this.getImageSize(presentPost.getIn(['feed','files',index,'original']));\r\n        await PostActions.setFileSize(imageSize);\r\n    }\r\n    renderPageInfo=async()=>{\r\n    const {postid,TimelineActions,PostActions,imageIndex} = this.props;\r\n    let index = imageIndex.substr(1);\r\n    const id = postid.substr(1);\r\n    await TimelineActions.getFeedInformationDetail(id);\r\n    await this.setPostTime();\r\n    const{presentPost} = this.props;\r\n    await this.setImageSize(index);\r\n    if(presentPost.getIn(['feed','files']) > 1)\r\n        TimelineActions.setImageArrowVisible('block');\r\n    }\r\n    getImageSize= (url)=> {\r\n        return new Promise((resolve, reject) => {\r\n          let image = new Image()\r\n          image.onload = () => {\r\n            resolve({\r\n              width: image.naturalWidth,\r\n              height: image.naturalHeight\r\n            })\r\n          }\r\n          image.src = url\r\n        })\r\n      }\r\n    renderCommentInfo =async()=>{\r\n        const {CommentActions,TimelineActions,presentPost,postid} = this.props;\r\n        const id = postid.substr(1);\r\n        let page = presentPost.getIn(['feed','commentPage']);\r\n            await CommentActions.showPostCommentList(id,page);\r\n            await TimelineActions.setDetailCommentPage(id);\r\n            const{comments,lastComment}=this.props;\r\n            if(lastComment)\r\n            await TimelineActions.setDetailCommentList({'commentId' : id,'commentList':comments,'trueComment' :false});\r\n            else\r\n            await TimelineActions.setDetailCommentList({'commentId' : id,'commentList':comments,'trueComment' :true});\r\n            await this.setCommentTime();\r\n    }\r\n    setPostTime = async() => {\r\n        const{presentPost,TimelineActions} = this.props;\r\n        let time = presentPost.getIn(['feed','timestamp']);\r\n        let timestring = this.dateTimeToFormatted(time);\r\n        await TimelineActions.setDetailTime(timestring);\r\n    }\r\n\r\n    setCommentTime = async() => {\r\n        const{presentPost,TimelineActions,commentList} = this.props;\r\n        const comments = commentList;\r\n                await Promise.all(\r\n                    comments.map(\r\n                        async(comment,commentIndex) => {\r\n                            let time = comment.timestamp;\r\n                            let timestring = this.dateTimeToFormatted(time);\r\n                            await TimelineActions.setDetailCommentTime({timestring:timestring,commentIndex:commentIndex});\r\n                        }\r\n                    )\r\n                );\r\n    }\r\n    handleLeft = async() => {\r\n        const {presentPost,imageIndex,history,postid,PostActions} = this.props;\r\n        let index = imageIndex.substr(1);\r\n        let imageSize = presentPost.getIn(['feed','files']).size;\r\n        this.setState({\r\n            pageCount : this.state.pageCount + 1\r\n        });\r\n        if(parseInt(index) === 0) {\r\n            await this.setImageSize(imageSize -1);\r\n            history.push(`/feed/@${postid}/image/:${imageSize-1}`);\r\n        }\r\n        else {\r\n            await this.setImageSize(parseInt(index)-1);\r\n            history.push(`/feed/@${postid}/image/:${parseInt(index)-1}`);\r\n        }\r\n    }\r\n    handleRight = async() => {\r\n        const {presentPost,imageIndex,history,postid,PostActions} = this.props;\r\n        let index = imageIndex.substr(1);\r\n        let size = await this.getImageSize(presentPost.getIn(['feed','files',index,'original']));\r\n        PostActions.setFileSize(size);\r\n        this.setState({\r\n            pageCount : this.state.pageCount + 1\r\n        });\r\n        let imageSize = presentPost.getIn(['feed','files']).size;\r\n        if(parseInt(index) === imageSize-1) {\r\n            await this.setImageSize(0);\r\n            history.push(`/feed/@${postid}/image/:0`);\r\n        }\r\n        else {\r\n            await this.setImageSize(parseInt(index)+1);\r\n            history.push(`/feed/@${postid}/image/:${parseInt(index)+1}`);\r\n        }\r\n    }\r\n    handleCommentAdd = async() =>{\r\n        const {TimelineActions,CommentActions,presentPost,postid} = this.props;\r\n        const id = postid.substr(1);\r\n        if(presentPost.getIn(['feed','trueComment'])){\r\n            \r\n            const page = presentPost.getIn(['feed','commentPage']);\r\n            try{\r\n                await CommentActions.showPostCommentList(id,page);\r\n                await TimelineActions.setDetailCommentPage(id);\r\n                const{comments,lastComment}=this.props;\r\n            if(lastComment)\r\n            await TimelineActions.setDetailCommentList({'commentId':id,'commentList':comments,'trueComment' :false});\r\n            else\r\n            await TimelineActions.setDetailCommentList({'commentId':id,'commentList':comments,'trueComment' :true});\r\n            await this.setCommentTime(id);\r\n            }catch(e){\r\n                TimelineActions.setCommentFalse(id);\r\n            }\r\n        } \r\n    }\r\n    enterComment = async(e) =>{\r\n        if(window.event.keyCode === 13){\r\n            const {CommentActions,TimelineActions,postid} = this.props;\r\n            const {innerText} = e.target;\r\n            const id = postid.substr(1);\r\n            var content = innerText;\r\n            content = content.replace(/\\r/g, \"\");\r\n            content = content.replace(/\\n/g, \"\");\r\n            await CommentActions.writeComment({id,content});\r\n            await CommentActions.showPostCommentList(id,1);\r\n            this.renewComment(id);\r\n            \r\n            for(var i = 0; i < document.getElementsByName('^^comment').length; i++){\r\n                console.log(document.getElementsByName('^^comment')[i].id);\r\n                if(parseInt(document.getElementsByName('^^comment')[i].id) === parseInt(id)){\r\n                    document.getElementsByName('^^comment')[i].textContent = '';\r\n                    document.getElementsByName('^^comment')[i].blur();\r\n                }\r\n            }\r\n            await CommentActions.getCommentNum(id);\r\n            var {commentNum} = this.props;\r\n            await TimelineActions.setCommentNum({'commentNum':commentNum,'commentId':id});\r\n            await this.setCommentTime(id);\r\n            \r\n        }\r\n    }\r\n    renewComment=(id)=>\r\n        setTimeout(async()=>{\r\n            const {presentComment,TimelineActions} = this.props;\r\n            await TimelineActions.renewDetailComment({'commentId' : id,'presentComment':presentComment});\r\n            await this.setCommentTime(id);\r\n        },2000);\r\n        handleLikeClick = async(e) =>{\r\n            const {LikeActions,TimelineActions} = this.props;\r\n            const id = e.target.id;\r\n            await TimelineActions.setLikeKey(id);\r\n            await LikeActions.clickLike(id);\r\n            await TimelineActions.setDetailLike('none');\r\n            await TimelineActions.setLike('none');\r\n            try{\r\n            await LikeActions.getLikeAndUserList(id,1);\r\n            }catch(e){}\r\n            const {totalNum} = this.props;\r\n            await TimelineActions.setDetailLikeNum(totalNum);\r\n            await TimelineActions.setLikeNum(totalNum);\r\n               \r\n        }\r\n        handleCancelClick =async(e) => {\r\n            const {LikeActions,TimelineActions} = this.props;\r\n            const id = e.target.id;\r\n            await TimelineActions.setLikeKey(id);\r\n            await LikeActions.cancelLike(id);\r\n            await TimelineActions.setDetailLike('block');\r\n            await TimelineActions.setLike('block');\r\n            try{\r\n            await LikeActions.getLikeAndUserList(id,1);\r\n            }catch(e){}\r\n            const {totalNum} = this.props;\r\n            await TimelineActions.setDetailLikeNum(totalNum);\r\n            await TimelineActions.setLikeNum(totalNum);\r\n        }\r\n    render(){\r\n        if(!storage.get('loggedInfo')) {\r\n            \r\n            return null;\r\n        }\r\n        const {thumbnail,username,nickname} = storage.get('loggedInfo');\r\n        const {presentPost,commentList,fileSize,imageIndex,history,trueComment,postid} = this.props;\r\n        const {handleLeft,handleRight,enterComment,handleCommentAdd,handleCancelClick,\r\n            handleLikeClick} = this;\r\n        let index = imageIndex.substr(1);\r\n        let postId = postid.substr(1);\r\n        return (\r\n            <DetailPostView mainfeed = {presentPost.toJS()}  fileSize = {fileSize} imageIndex = {index}\r\n             history={history} handleLeft={handleLeft} handleRight={handleRight} pageCount = {this.state.pageCount} > \r\n                <CommentList comments = {commentList} commentThumbnail = {thumbnail} name={nickname}\r\n            userId= {username} enterComment = {enterComment} handleCommentAdd = {handleCommentAdd}\r\n            trueComment = {trueComment} postId={postId} mainfeed = {presentPost.toJS()} cancel={handleCancelClick}\r\n            like = {handleLikeClick}/>\r\n            </DetailPostView>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    (state) => ({\r\n        presentPost : state.timeline.get('presentPost'),\r\n        lastComment : state.comment.get('lastComment'),\r\n        comments : state.comment.get('commentList'),\r\n        commentList : state.timeline.getIn(['presentPost','feed','commentList']),\r\n        fileSize : state.post.get('fileSize'),\r\n        commentNum : state.comment.get('commentNum'),\r\n        trueComment : state.timeline.getIn(['presentPost','feed','trueComment']),\r\n        totalNum : state.like.get('totalNum'),\r\n        presentComment : state.comment.get('presentComment')\r\n    }),\r\n    (dispatch) => ({\r\n        TimelineActions : bindActionCreators(timelineActions,dispatch),\r\n        CommentActions : bindActionCreators(commentActions,dispatch),\r\n        PostActions : bindActionCreators(postActions,dispatch),\r\n        LikeActions : bindActionCreators(likeActions,dispatch)\r\n    })\r\n)(PostDetailContainer);"]},"metadata":{},"sourceType":"module"}